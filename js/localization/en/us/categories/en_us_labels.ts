export default {
  ApplianceAdd:{
    __filename: "../js/views/deviceViews/ApplianceAdd.tsx",
    NEW_DEVICE:                 () => { return "NEW DEVICE" },
    Type_Name:                  () => { return "Type Name" },
    Icon:                       () => { return "Icon" },
    The_properties_of_device_:  () => { return "The properties of device types are shared among all Crownstones that have this device plugged in. Device type behaviour overrules the Crownstone behaviour." },
  },
  ApplianceSelection:{
    __filename: "../js/views/deviceViews/ApplianceSelection.tsx",
    ALL_DEVICES:                () => { return "ALL DEVICES" },
    ADD_DEVICE_TYPES:           () => { return "ADD DEVICE TYPES" },
  },
  DeviceBehaviourEdit:{
    __filename: "../js/views/deviceViews/DeviceBehaviourEdit.tsx",
    turn_on:                    () => { return "turn on" },
    turn_off:                   () => { return "turn off" },
    do_nothing:                 () => { return "do nothing" },
    __seconds:                  () => { return "2 seconds" },
    ___seconds:                 () => { return "30 seconds" },
    __minute:                   () => { return "1 minute" },
    __minutes:                  () => { return "5 minutes" },
    ___minutes:                 () => { return "30 minutes" },
    turn_on_after_:             () => { return "turn on after " + arguments[0] },
    turn_off_after_:            () => { return "turn off after " + arguments[0] },
    turn_on_with_delay:         () => { return "turn on with delay" },
    turn_off_with_delay:        () => { return "turn off with delay" },
    WHEN_YOU____:               () => { return "WHEN YOU ..." },
    Since_this_Crownstone_is_:  () => { return "Since this Crownstone is not in a room, we cannot give it behaviour for entering or leaving it\'s room." },
    EXCEPTIONS:                 () => { return "EXCEPTIONS" },
    Only_turn_on_if_it_s_dark:  () => { return "Only turn on if it\'s dark outside" },
    Today__for_this_Sphere__i:  () => { return "Today, for this Sphere, it is dark outside from " + arguments[0] + " until " + arguments[1] + " in the morning." },
  },
  DeviceEdit:{
    __filename: "../js/views/deviceViews/DeviceEdit.tsx",
    PLUGGED_IN_DEVICE_TYPE:     () => { return "PLUGGED IN DEVICE TYPE" },
    This_Crownstone_is_curren:  () => { return "This Crownstone is currently using the behaviour, name and icon of this device type. Decoupling it will revert the behaviour back to the empty Crownstone configuration." },
    CURRENT_CROWNSTONE_USING_:  () => { return "CURRENT CROWNSTONE USING THIS TYPE" },
    CROWNSTONE:                 () => { return "CROWNSTONE" },
    Tap_to_toggle_can_be_enab:  () => { return "Tap to toggle can be enabled per Crownstone." },
    SWITCHCRAFT:                () => { return "SWITCHCRAFT" },
    SELECT_WHICH_DEVICE_TYPE_:  () => { return "SELECT WHICH DEVICE TYPE IS PLUGGED IN" },
    Removing_this_Crownstone_:  () => { return "Removing this Crownstone from its Sphere will revert it back to factory defaults (and back in setup mode)." },
  },
  DeviceIconSelection:{
    __filename: "../js/views/deviceViews/DeviceIconSelection.tsx",
    __new:                      () => { return "__new" },
    Lights:                     () => { return "Lights" },
    Tech:                       () => { return "Tech" },
    Furniture:                  () => { return "Furniture" },
    Bathroom:                   () => { return "Bathroom" },
    Office:                     () => { return "Office" },
    Bedroom:                    () => { return "Bedroom" },
    Tools:                      () => { return "Tools" },
    Kitchen:                    () => { return "Kitchen" },
    Outside:                    () => { return "Outside" },
    Rides:                      () => { return "Rides" },
    Miscellaneous:              () => { return "Miscellaneous" },
  },
  DeviceSchedule:{
    __filename: "../js/views/deviceViews/elements/DeviceSchedule.tsx",
    SCHEDULED_ACTIONS:          () => { return "SCHEDULED ACTIONS" },
  },
  DeviceScheduleEdit:{
    __filename: "../js/views/deviceViews/DeviceScheduleEdit.tsx",
    TAP_THE_TIME_TO_CHANGE_IT:  () => { return "TAP THE TIME TO CHANGE IT" },
    PICK_A_TIME:                () => { return "PICK A TIME" },
    Label:                      () => { return "Label" },
    ACTION:                     () => { return "ACTION" },
    On:                         () => { return "On" },
    Off:                        () => { return "Off" },
    REPEAT:                     () => { return "REPEAT" },
    SCHEDULING_OPTIONS:         () => { return "SCHEDULING OPTIONS" },
    Schedule_active:            () => { return "Schedule active" },
  },
  DiagnosticUtil:{
    __filename: "../js/views/settingsViews/diagnostics/DiagnosticUtil.tsx",
  },
  EditableItem:{
    __filename: "../js/views/components/EditableItem.tsx",
  },
  IconDebug:{
    __filename: "../js/views/development/IconDebug.tsx",
    c__part_:                   () => { return "c1 part " + arguments[0] },
    c_:                         () => { return "c3" },
    ionicons_ios:               () => { return "ionicons-ios" },
    ionicons_md:                () => { return "ionicons-md" },
  },
  MessageAdd:{
    __filename: "../js/views/messaging/MessageAdd.tsx",
    IN_A_ROOM:                  () => { return "IN A ROOM" },
    ANYWHERE_IN_THE_SPHERE:     () => { return "ANYWHERE IN THE SPHERE" },
    EVERYONE_IN_YOUR_SPHERE:    () => { return "EVERYONE IN YOUR SPHERE" },
    SPECIFIC_USERS:             () => { return "SPECIFIC USERS" },
    MESSAGE:                    () => { return "MESSAGE" },
    __________:                 () => { return "( " + arguments[0] + " / 140 )" },
    RECIPIENTS:                 () => { return "RECIPIENTS" },
    LEAVE_MESSAGE_IN:           () => { return "LEAVE MESSAGE IN" },
    WHEN_SHOULD_IT_BE_DELIVER:  () => { return "WHEN SHOULD IT BE DELIVERED" },
    Entering:                   () => { return "Entering" },
    Exiting:                    () => { return "Exiting" },
    When_entering_is_selected:  () => { return "When entering is selected and the user is already there, the message will also be delivered!" },
  },
  MessageEntry:{
    __filename: "../js/views/messaging/MessageEntry.tsx",
    Unknown_User:               () => { return "Unknown User" },
    You:                        () => { return "You" },
    Everyone_in_:               () => { return "Everyone in " + arguments[0] },
  },
  MessageInbox:{
    __filename: "../js/views/messaging/MessageInbox.tsx",
    MESSAGES:                   () => { return "MESSAGES" },
  },
  RoomAdd:{
    __filename: "../js/views/roomViews/RoomAdd.tsx",
    NEW_ROOM:                   () => { return "NEW ROOM" },
    Room_Name:                  () => { return "Room Name" },
    Icon:                       () => { return "Icon" },
    ADD_CROWNSTONES_TO_ROOM:    () => { return "ADD CROWNSTONES TO ROOM" },
    You_can_select_floating_C:  () => { return "You can select floating Crownstones to immediately add them to this new room!" },
    CURRENTLY_MOVING_CROWNSTO:  () => { return "CURRENTLY MOVING CROWNSTONE" },
  },
  RoomEdit:{
    __filename: "../js/views/roomViews/RoomEdit.tsx",
    ROOM_SETTINGS:              () => { return "ROOM SETTINGS" },
    Icon:                       () => { return "Icon" },
    INDOOR_LOCALIZATION:        () => { return "INDOOR LOCALIZATION" },
    Retrain_Room:               () => { return "Retrain Room" },
    If_the_indoor_localizatio:  () => { return "If the indoor localization seems off or when you have moved Crownstones around, " + "you can retrain this room so " + arguments[0] + " can find you again!" },
    Teach__to_find_you_:        () => { return "Teach " + arguments[0] + " to find you!" },
    Teach__to_identify_when_y:  () => { return "Teach " + arguments[0] + " to identify when you\'re in this room by walking around in it." },
    You_can_only_train_this_r:  () => { return "You can only train this room if you are in this Sphere." },
    Indoor_localization_on_ro:  () => { return "Indoor localization on room-level is only possible when you have 4 or more Crownstones registered and placed in rooms." },
    Enable_indoor_localizatio:  () => { return "Enable indoor localization in the app settings to be able to train this room." },
  },
  RoomIconSelection:{
    __filename: "../js/views/roomViews/RoomIconSelection.tsx",
    Hallway:                    () => { return "Hallway" },
    Living_Room:                () => { return "Living Room" },
    Kitchen:                    () => { return "Kitchen" },
    Bathroom:                   () => { return "Bathroom" },
    Office:                     () => { return "Office" },
    Bedroom:                    () => { return "Bedroom" },
    Garage:                     () => { return "Garage" },
    Play_Room:                  () => { return "Play Room" },
    Music_Room:                 () => { return "Music Room" },
    Nature___Outside:           () => { return "Nature / Outside" },
    Miscellaneous:              () => { return "Miscellaneous" },
  },
  RoomSelection:{
    __filename: "../js/views/roomViews/RoomSelection.tsx",
    ROOMS_IN_CURRENT_SPHERE:    () => { return "ROOMS IN CURRENT SPHERE" },
    DECOUPLE_THIS_CROWNSTONE:   () => { return "DECOUPLE THIS CROWNSTONE" },
    If_you_do_not_add_the_Cro:  () => { return "If you do not add the Crownstone to a room, it can not be used for indoor localization purposes." },
  },
  SettingConstructor:{
    __filename: "../js/util/SettingConstructor.tsx",
  },
  SettingsApp:{
    __filename: "../js/views/settingsViews/SettingsApp.tsx",
    FEATURES:                   () => { return "FEATURES" },
    Tap_to_toggle_allows_you_:  () => { return "Tap to toggle allows you to hold your phone against a Crownstone to toggle it automatically!" },
    If_indoor_localization_is:  () => { return "If indoor localization is disabled, tap to toggle does only work when the app is on the screen." },
    BATTERY_USAGE:              () => { return "BATTERY USAGE" },
    The_heartbeat_is_part_of_:  () => { return "The heartbeat is part of the indoor localization process. Every now and then, the app will tell the Crownstones that you're still there." + "\n\nThis is used for the following behaviours:" + "\n  - Exit Sphere" + "\n  - Exit Room" + "\n\nIf you disable the heartbeat and another user is using it with the exit events, the Crownstones can turn off when that user leaves the house (according to their behaviour)." },
    The_heartbeat_is_part_of_t: () => { return "The heartbeat is part of the indoor localization process. If indoor localization is disabled, the heartbeat will also be disabled." },
  },
  SettingsBleDebug:{
    __filename: "../js/views/settingsViews/dev/SettingsBleDebug.tsx",
    You_have_to_be_in_a_spher:  () => { return "You have to be in a sphere in order to debug BLE" },
  },
  SettingsDeveloper:{
    __filename: "../js/views/settingsViews/SettingsDeveloper.tsx",
    LOGGING:                    () => { return "LOGGING" },
    Logging_will_keep_a_histo:  () => { return "Logging will keep a history of what the app is doing for the last 3 days." },
    Logging_will_keep_a_histor: () => { return "Logging will keep a history of what the app is doing for the last 3 days." },
    CLOUD:                      () => { return "CLOUD" },
    DEBUG_VIEWS:                () => { return "DEBUG VIEWS" },
    ACTIVITY_LOGS:              () => { return "ACTIVITY LOGS" },
    DO_NOT_USE:                 () => { return "DO NOT USE" },
    By_default_we_use_iBeacon:  () => { return "By default we use iBeacon RSSI values since they are averaged. When enabled, we will ALSO use the RSSI values from advertisements. Advertisment RSSI values only come in in the foreground." },
    MESH:                       () => { return "MESH" },
    ALPHA_FEATURES_WILL_LOOK_:  () => { return "ALPHA FEATURES WILL LOOK LIKE THIS" },
    EXPERIMENTAL_FEATURES:      () => { return "EXPERIMENTAL FEATURES" },
    This_will_give_you_early_:  () => { return "This will give you early access to new experimental features!" },
    RESET_DEVELOPER_STATE:      () => { return "RESET DEVELOPER STATE" },
    CLOUD_URL__:                () => { return "CLOUD URL: " + arguments[0] },
  },
  SettingsLogging:{
    __filename: "../js/views/settingsViews/dev/SettingsLogging.tsx",
    General:                    () => { return "General" },
    Native:                     () => { return "Native" },
    Mesh:                       () => { return "Mesh" },
    Notifications:              () => { return "Notifications" },
    Scheduler:                  () => { return "Scheduler" },
    BLE:                        () => { return "BLE" },
    Batch_C_Handler:            () => { return "Batch C Handler" },
    Events:                     () => { return "Events" },
    Store:                      () => { return "Store" },
    Cloud:                      () => { return "Cloud" },
    disabled:                   () => { return "disabled" },
    error:                      () => { return "error" },
    warning:                    () => { return "warning" },
    info:                       () => { return "info" },
    debug:                      () => { return "debug" },
    verbose:                    () => { return "verbose" },
  },
  SettingsMeshDebug:{
    __filename: "../js/views/settingsViews/dev/SettingsMeshDebug.tsx",
    You_have_to_be_in_a_spher:  () => { return "You have to be in a sphere in order to debug Mesh" },
    You_have_to_be_in_a_sphere: () => { return "You have to be in a sphere in order to debug Mesh" },
  },
  SettingsMeshTopology:{
    __filename: "../js/views/settingsViews/SettingsMeshTopology.tsx",
  },
  SettingsProfile:{
    __filename: "../js/views/settingsViews/SettingsProfile.tsx",
    This_will_enable_certain_:  () => { return "This will enable certain features that are useful for developers. Only use if you know what you\'re doing." },
  },
  SettingsStoneBleDebug:{
    __filename: "../js/views/settingsViews/dev/SettingsStoneBleDebug.tsx",
    iBeacon_UUID___niBeacon_M:  () => { return "iBeacon UUID: " + arguments[0] + "\n" + "iBeacon Major: " + arguments[1] + "\n" + "iBeacon Minor: " + arguments[2] + "\n" },
    Latest_iBeacon_data_:       () => { return "Latest iBeacon data:" },
    Time_received__no_data:     () => { return "Time received: " + (arguments[0] ? arguments[1] : "no data") },
    Green_Background_means_ex:  () => { return "Green Background means external state." },
    Latest_Direct_Advertiseme:  () => { return "Latest Direct Advertisement data:" },
    Latest_Applied_Advertisem:  () => { return "Latest Applied Advertisement data:" },
  },
  SphereBehaviour:{
    __filename: "../js/views/main/editSubviews/SphereBehaviour.tsx",
    __Minutes:                  () => { return "5 Minutes" },
    ___Minutes:                 () => { return "30 Minutes" },
    SPHERE_EXIT_DELAY:          () => { return "SPHERE EXIT DELAY" },
  },
  SphereCrownstoneOverview:{
    __filename: "../js/views/main/editSubviews/SphereCrownstoneOverview.tsx",
    There_are_no_Crownstones_:  () => { return "There are no Crownstones in this Sphere yet!" },
    This_is_an_overview_of_al:  () => { return "This is an overview of all your Crownstones. To access the settings of these Crownstones, go to their rooms and tap on them there." },
  },
  SphereEdit:{
    __filename: "../js/views/main/SphereEdit.tsx",
    What_can_I_help_you_with_:  () => { return "What can I help you with?" },
    A_Sphere_contains_your_Cr:  () => { return "A Sphere contains your Crownstones, Rooms and preferences. You can add others to your Sphere so they may also use your Crownstones!" },
  },
  SphereEditSettings:{
    __filename: "../js/views/main/editSubviews/SphereEditSettings.tsx",
    SPHERE_DETAILS:             () => { return "SPHERE DETAILS" },
    PERSONAL_ARTIFICIAL_INTEL:  () => { return "PERSONAL ARTIFICIAL INTELLIGENCE" },
    _will_do__very_best_help_:  () => { return arguments[0] + " will do " + arguments[1] + " very best help you!" },
    DANGER:                     () => { return "DANGER" },
    This_cannot_be_undone_:     () => { return "This cannot be undone!" },
  },
  SphereIntegrations:{
    __filename: "../js/views/main/editSubviews/SphereIntegrations.tsx",
    Here_you_can_integrate_wi:  () => { return "Here you can integrate with different services. We\'re hard at work to add more!" },
    Thermostats_:               () => { return "Thermostats:" },
    Coming_Soon_:               () => { return "Coming Soon:" },
  },
  SphereInvitedUser:{
    __filename: "../js/views/main/editSubviews/SphereInvitedUser.tsx",
    INVITE_WAS_SENT_TO:         () => { return "INVITE WAS SENT TO" },
    MANAGE_INVITE:              () => { return "MANAGE INVITE" },
  },
  SphereRoomOverview:{
    __filename: "../js/views/main/editSubviews/SphereRoomOverview.tsx",
    CUSTOMIZE_LAYOUT:           () => { return "CUSTOMIZE LAYOUT" },
    ROOMS_IN_SPHERE:            () => { return "ROOMS IN SPHERE" },
  },
  SphereUser:{
    __filename: "../js/views/main/editSubviews/SphereUser.tsx",
    Member:                     () => { return "Member" },
    Guest:                      () => { return "Guest" },
    Admin:                      () => { return "Admin" },
    User:                       () => { return "User" },
    Email:                      () => { return "Email" },
    REVOKE_PERMISSIONS:         () => { return "REVOKE PERMISSIONS" },
    Remove_from_Sphere:         () => { return "Remove from Sphere" },
  },
  SphereUserInvite:{
    __filename: "../js/views/main/editSubviews/SphereUserInvite.tsx",
    Admin:                      () => { return "Admin" },
    Member:                     () => { return "Member" },
    Guest:                      () => { return "Guest" },
    Access_level:               () => { return "Access level" },
    Members_can_configure_Cro:  () => { return "Members can configure Crownstones." },
    Guests_can_control_Crowns:  () => { return "Guests can control Crownstones and devices will remain on if they are the last one in the room." },
  },
  SphereUserOverview:{
    __filename: "../js/views/main/editSubviews/SphereUserOverview.tsx",
    ADMINS:                     () => { return "ADMINS" },
    Admins_can_add__configure:  () => { return "Admins can add, configure and remove Crownstones and Rooms." },
    MEMBERS:                    () => { return "MEMBERS" },
    Members_can_configure_Cro:  () => { return "Members can configure Crownstones." },
    GUESTS:                     () => { return "GUESTS" },
    Guests_can_control_Crowns:  () => { return "Guests can control Crownstones and devices will remain on if they are the last one in the room." },
    ADD_MORE_PEOPLE:            () => { return "ADD MORE PEOPLE" },
  },
}