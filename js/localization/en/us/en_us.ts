export default {
  Ability_DimmerSettings:{
    __filename: "../../js/views/deviceViews/abilities/settings/Ability_DimmerSettings.tsx",
    Dimming_compatibility:                  function() { return "Dimming compatibility" },
    Disable_dimming:                        function() { return "Disable dimming" },
    Dimming_allows_you_to_set:              function() { return "Dimming allows you to set the mood, and to use the Twilight mode behaviours." },
    It_is_up_to_you_to_determ:              function() { return "It is up to you to determine which devices can be dimmed. Naturally, you wouldn't want to dim anything other than lights!" },
    The_Crownstones_can_safel:              function() { return "The Crownstones can safely dim up to 100W." },
    Dimmer_Settings:                        function() { return "Dimmer Settings" },
    Really_fast_:                           function() { return "Really fast!" },
    Fast_:                                  function() { return "Fast!" },
    Quickly_:                               function() { return "Quickly!" },
    Normally_:                              function() { return "Normally." },
    Gently__:                               function() { return "Gently.." },
    Slowly___:                              function() { return "Slowly..." },
    Use_smoothing:                          function() { return "Use smoothing" },
    Should_I_fade_slowly_or_q:              function() { return "Should I fade slowly or quickly?" },
    Update_Crownstone_to_use_:              function() { return "Update Crownstone to use Smoothing!" },
  },
  Ability_SwitchcraftInformation:{
    __filename: "../js/views/deviceViews/elements/SwitchcraftInformation.tsx",
    Switchcraft_is_a_new__exp:              function() { return "Switchcraft is a feature of the Crownstone Built-in One that allows you to switch your lights with both Crownstone and an existing wall switch." + "\n\nIt is designed for Crownstone Built-in Ones that are mounted in a ceiling light fixture." + "\n\nUsually, if you have a Crownstone in your ceiling light and the wall switch is off, there is no power to the Crownstone so it cannot switch the light." + "\n\nLet's take a look a the situation before Crownstone:" },
    The_symbols_shown_have_th:              function() { return "The symbols shown have the following meaning:" },
    Lamp:                                   function() { return "Lamp" },
    Mains:                                  function() { return "Mains" },
    Switch:                                 function() { return "Switch" },
    Built_in_nCrownstone:                   function() { return "Built-in\nCrownstone" },
    After_installing_the_buil:              function() { return "After installing the built-in Crownstone it should look like this:" },
    The_adaptation_in_the_ima:              function() { return "The adaptation in the image above shows the required change to enable Switchcraft.\n\nBEFORE MODIFYING YOUR SWITCHES, DISABLE THE POWER ON THE MAINS\n\nMost switches have 3 ports, where each port can have 2 slots. Let's take a look a the switch below:" },
    At_the_top__where_the_bro:              function() { return "At the top, where the brown wire goes in, that's where the power comes from the mains. In most cases, there will be one wire going out: to the light." + "\n\nIn the next picture we see the adaptation " + "which will allow this switch to be used with Switchcraft:" },
    Thats_all__When_youre_goi:              function() { return "That's all!\n\nAgain, when you're going to upgrade your existing wall switches to work with Switchcraft, make sure that there is NO POWER ON THE MAINS!" },
    Enjoy_Switchcraft_:                     function() { return "Enjoy Switchcraft!" },
    Switchcraft:                            function() { return "Switchcraft" },
  },
  Ability_SwitchcraftSettings:{
    __filename: "../../js/views/deviceViews/abilities/settings/Ability_SwitchcraftSettings.tsx",
    Installation___Informatio:              function() { return "Installation & Information" },
    Disable_Switchcraft:                    function() { return "Disable Switchcraft" },
    This_Crownstone_is_config:              function() { return "This Crownstone is configured to use Switchcraft. Ensure that the wall switch that is switching it has the Switchcraft modification applied." },
    Tap_the_installation___in:              function() { return "Tap the installation & information button for instructions for modifying your wall switch." },
    Swichcraft_should_only_be:              function() { return "Swichcraft should only be enabled for Crownstones connected to a physical wall switch." },
    Switchcraft_Settings:                   function() { return "Switchcraft Settings" },
  },
  Ability_TapToToggleInformation:{
    __filename: "../../js/views/deviceViews/abilities/information/Ability_TapToToggleInformation.tsx",
    If_you_dont_want_to_open_:              function() { return "If you don't want to open the app to toggle a specific Crownstone, just hold your phone against it!" },
    Your_phone_broadcasts_a_s:              function() { return "Your phone broadcasts a signal that the Crownstones can pick up! The minimum distance your phone will toggle any of your Crownstones is configured in the app settings." },
    Once_your_phone_is_close_:              function() { return "Once your phone is close enough to the Crownstone to activate tap-to-toggle, the Crownstone will toggle on and off as long as the phone is near. " },
    You_can_choose_how_close_:              function() { return "You can choose how close you have to hold your phone before it starts to toggle. Additionally, you can globally enable or disable tap-to-toggle in the app settings." },
    If_youd_prefer_to_enable_:              function() { return "If you'd prefer to enable or disable tap-to-toggle for individual Crownstones, you can do that in the abilities!" },
    Tap_to_toggle_is_not_mean:              function() { return "Tap-to-toggle is not meant to replace presence based behaviour." },
    Tap_to_Toggle:                          function() { return "Tap-to-Toggle" },
  },
  Ability_TapToToggleSettings:{
    __filename: "../../js/views/deviceViews/abilities/settings/Ability_TapToToggleSettings.tsx",
    CHANGE_TAP_TO_TOGGLE_DIST:              function() { return "CHANGE TAP TO TOGGLE DISTANCE FOR:" },
    All_Crownstones:                        function() { return "All Crownstones" },
    Only_this_Crownstone:                   function() { return "Only this Crownstone" },
    More_information:                       function() { return "More information" },
    DISABLE_FOR_ONLY_THIS_CRO:              function() { return "DISABLE FOR ONLY THIS CROWNSTONE" },
    Disable_Tap_to_toggle:                  function() { return "Disable Tap-to-toggle" },
    If_you_dont_want_to_open_:              function() { return "If you don't want to open the app to toggle a specific Crownstone, just hold your phone against it!" },
    Your_phone_broadcasts_a_s:              function() { return "Your phone broadcasts a signal that the Crownstones can pick up! The minimum distance your phone will toggle any of your Crownstones is configured in the app settings." },
    this_specific_Crownstone:               function() { return "this specific Crownstone" },
    Tap_to_toggle_is_not_mean:              function() { return "Tap-to-toggle is not meant to replace presence based behaviour." },
    Tap_to_Toggle_Settings:                 function() { return "Tap-to-Toggle Settings" },
    Same_as_all_Crownstones_:               function() { return "Same as all Crownstones." },
    Requires_the_phone_to_be_:              function() { return "Requires the phone to be closer compared to the other Crownstones." },
    Requires_the_phone_to_be_m:             function() { return "Requires the phone to be much closer compared to the other Crownstones." },
    Reacts_sooner_compared_to:              function() { return "Reacts sooner compared to the other Crownstones." },
    Reacts_much_sooner_than_t:              function() { return "Reacts much sooner than the other Crownstones." },
  },
  AddCrownstone:{
    __filename: "../../js/views/addingCrownstones/AddCrownstone.tsx",
    Plug:                                   function() { return "Plug" },
    Built_in_One:                           function() { return "Built-in One" },
    Built_in_Zero:                          function() { return "Built-in Zero" },
    Visit_the_Shop_:                        function() { return "Visit the Shop!" },
    Next:                                   function() { return "Next" },
    Yes__behind_a_socket_:                  function() { return "Yes, behind a socket." },
    Yes__at_a_ceiling_light_:               function() { return "Yes, at a ceiling light." },
    Not_yet_:                               function() { return "Not yet!" },
    Behind_a_socket_:                       function() { return "Behind a socket." },
    With_a_ceiling_light_:                  function() { return "With a ceiling light." },
    OK__I_have_installed_it_:               function() { return "OK. I have installed it!" },
    I_dont_have_nCrownstones_y:             function() { return "I don't have\nCrownstones yet..." },
    Lets_add_a_Crownstone_:                 function() { return "Let's add a Crownstone!" },
    What_sort_of_Crownstone_w:              function() { return "What sort of Crownstone would you like to add?" },
    Tap_the_button_below_to_g:              function() { return "Tap the button below to go to the shop!" },
    Insert_the_plug_into_a_po:              function() { return "Insert the plug into a power outlet and hold your phone close by. Tap next when you're ready!" },
    Is_the_Built_in_Zero_alre:              function() { return "Is the Built-in Zero already installed?" },
    Is_your_Built_in_One_alre:              function() { return "Is your Built-in One already installed?" },
    Installation:                           function() { return "Installation" },
    Do_you_wish_to_use_this_C:              function() { return "Do you wish to use this Crownstone behind a power socket or with a ceiling light?" },
    Installing_behind_a_socke:              function() { return "Installing behind a socket" },
    Please_follow_the_instruc:              function() { return "Please follow the instructions in the manual for the installation.\n\nIn future releases, we will have a complete install guide here." },
    Installing_in_a_ceiling_l:              function() { return "Installing in a ceiling light" },
    Please_follow_the_instruct:             function() { return "Please follow the instructions in the manual for the installation.\n\nIn future releases, we will have a complete install guide here." },
    Lets_get_close_:                        function() { return "Let's get close!" },
    Hold_your_phone_close_to_:              function() { return "Hold your phone close to the socket with the Crownstone.\n\nMake sure the power is back on and press next to continue!" },
    Hold_your_phone_near_the_:              function() { return "Hold your phone near the ceiling light with the Crownstone.\n\nMake sure the power is back on and press next to continue!" },
    Guidestone:                             function() { return "Guidestone" },
    Hub:                                    function() { return "Hub" },
    Crownstone_USB:                         function() { return "Crownstone USB" },
    A_Plug_it_is_:                          function() { return "A Plug it is!" },
    Lets_add_a_Built_in_One_:               function() { return "Let's add a Built-in One!" },
    Lets_add_a_Built_in_Zero_:              function() { return "Let's add a Built-in Zero!" },
    Lets_add_a_Guidestone_:                 function() { return "Let's add a Guidestone!" },
    Lets_add_a_Crownstone_USB:              function() { return "Let's add a Crownstone USB!" },
    Lets_buy_Crownstones_:                  function() { return "Let's buy Crownstones!" },
    Insert_the_guidestone_int:              function() { return "Insert the guidestone into a power outlet and hold your phone close by. Tap next when you're ready!" },
    Insert_the_Crownstone_USB:              function() { return "Insert the Crownstone USB into a USB port and hold your phone close by. Tap next when you're ready!" },
  },
  AddCrownstoneButtonDescription:{
    __filename: "../../js/views/main/buttons/AddCrownstoneButtonDescription.tsx",
    Add_Crownstones_now_:                   function() { return "Add Crownstones now!" },
  },
  AddItemsToSphere:{
    __filename: "../js/views/main/AddItemsToSphere.tsx",
    Room:                                   function() { return "Room" },
    Crownstone:                             function() { return "Crownstone" },
    Person:                                 function() { return "Person" },
    Something_else_:                        function() { return "Something else!" },
    Add_to_your_Sphere:                     function() { return "Add to your Sphere" },
    You_can_add_Rooms__People:              function() { return "You can add Rooms, People or Crownstones to your Sphere. As more devices will be integrated with the Crownstone, they will appear here as well!\n\nWhat do you want to add?" },
  },
  AddSphereTutorial:{
    __filename: "../../js/views/main/addSphereTutorial/AddSphereTutorial.tsx",
    New_Sphere:                             function() { return "New Sphere" },
  },
  AddSphereTutorial_intended:{
    __filename: "../../js/views/main/addSphereTutorial/elements/AddSphereTutorial_intended.tsx",
    One_Sphere_per_House:                   function() { return "One Sphere per House" },
    Using_only_one_sphere_per:              function() { return "Using only one sphere per individual building (like house, office or holiday home), you can add up to 20 spheres!\n\n" + "If you want to create a new sphere, tap the \"Understood\" button below.\n\nIf you do not need a new sphere after all, press back or the \"Never mind\" button." },
    I_dont_need_a_sphere:                   function() { return "Never mind." },
    Something_went_wrong_with:              function() { return "Something went wrong with the creation of your Sphere." },
    Whoops:                                 function() { return "Whoops!" },
    I_understand_:                          function() { return "Understood, create sphere!" },
  },
  AddSphereTutorial_introduction:{
    What_is_a_Sphere_:                      function() { return "What is a Sphere?" },
    Spheres_are_individual__s:              function() { return "Spheres are individual, separated collections of Crownstones.\n\n" + "Crownstones in different spheres cannot talk to eachother.\n\n" + "Every sphere has it's own collection of users." },
  },
  AddSphereTutorial_multiple:{
    __filename: "../../js/views/main/addSphereTutorial/elements/AddSphereTutorial_multiple.tsx",
    Multiple_Spheres:                       function() { return "Multiple Spheres" },
    A_single_house_should_only:             function() { return "A single house should only be a single sphere.\n\n" + "Indoor localization in a sphere only uses its own Crownstones.\n\n" + "Being present in multiple spheres at the same time can give rise to unwanted behaviour." },
  },
  AiStart:{
    __filename: "../js/views/startupViews/AiStart.tsx",
    _Ehmm_____arguments_______header:       function() { return "Ehmm " + arguments[0] + ".. :(" },
    _Ehmm_____arguments_______body:         function() { return "I'd really like a name... Could you give me one please?" },
    _Ehmm_____arguments_______left:         function() { return "Right Away!" },
    Name_your_house_:                       function() { return "Name your house!" },
    Thank_you_:                             function() { return "Thank you!" },
    Its_nice_to_finally_meet_:              function() { return "It's nice to finally meet you!" },
    Lets_get_started_:                      function() { return "Let's get started!" },
    I_think_my_name_describes:              function() { return "I think my name describes me perfectly too!" },
    Youre_right_:                           function() { return "You're right!" },
    This_name_is_much_better_:              function() { return "This name is much better, great choice!" },
    It_suits_you_:                          function() { return "It suits you!" },
    Welcome__:                              function() { return "Welcome " + arguments[0] + "!" },
    Im_your_house_:                         function() { return "I'm your house!" },
    What_would_you_like_to_ca:              function() { return "What would you like to call me?" },
    Your_AI:                                function() { return "Your AI" },
  },
  AicoreBehaviour:{
    I_will_be:                              function() { return "I will be" },
  },
  AicoreTimeCustomization:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/supportComponents/AicoreTimeCustomization.tsx",
    When_should_I_start_:                   function() { return "When should I start?" },
    When_am_I_finished_:                    function() { return "When am I finished?" },
    This_behaviour_ends_at_:                function() { return "This behaviour ends at:" },
    Looks_good_:                            function() { return "Looks good!" },
    Tap_to_select_time_:                    function() { return "Tap to select time!" },
    At_sunrise___:                          function() { return "At sunrise..." },
    At_sunset___:                           function() { return "At sunset..." },
    At_a_specific_time___:                  function() { return "At a specific time..." },
    __h:                                    function() { return "+2h" },
    Exactly_or_with_an_offset_:             function() { return "Exactly or with an offset?" },
    _The_start_and_ending_time_header:      function() { return "The start and ending times can't be the same!" },
    _The_start_and_ending_time_body:        function() { return "Check the times you set to make sure they're not exactly the same." },
    _The_start_and_ending_time_left:        function() { return "OK" },
    I_want_something_else_:                 function() { return "I want something else!" },
    TAP_TIME_TO_CHANGE:                     function() { return "TAP TIME TO CHANGE" },
    Ill_start_at_:                          function() { return "I'll start at:" },
    Thats_a_good_time_:                     function() { return "That's a good time!" },
  },
  AicoreTimeCustomizationOverlay:{
    __filename: "../../js/views/overlays/AicoreTimeCustomizationOverlay.tsx",
    Time_Selection:                         function() { return "Time Selection" },
  },
  AicoreTwilight:{
    If_Im_turned_on:                        function() { return "If I'm turned on" },
  },
  AicoreUtil:{
    if:                                     function() { return "if" },
    somebody:                               function() { return "somebody" },
    Ill_dim_to___instead:                   function() { return "I'll dim to " + arguments[0] + "% instead" },
    dimmed_at__:                            function() { return "dimmed at " + arguments[0] + "%" },
    on:                                     function() { return "on" },
    nobody:                                 function() { return "nobody" },
    is:                                     function() { return "is" },
    home:                                   function() { return "home" },
    is_in_the:                              function() { return "is in the" },
    locationPostfix:                        function() { return "" },
    sunset:                                 function() { return "sunset" },
    sunrise:                                function() { return "sunrise" },
    __hour:                                 function() { return "1 hour" },
    _hours:                                 function() { return arguments[0] + " hours" },
    _minutes:                               function() { return arguments[0] + " minutes" },
    _before_:                               function() { return arguments[0] + " before " },
    _after_:                                function() { return arguments[0] + " after " },
    _hrs___mins:                            function() { return arguments[0] + " hrs, " + arguments[1] + " mins" },
    _deleted_location_:                     function() { return "(deleted location)" },
    stay_on_if_someone_is_sti:              function() { return "stay on if someone is still in the room" },
    Afterwards__Ill:                        function() { return "Afterwards, I'll" },
    stay_on_if_someone_is_stil:             function() { return "stay on if someone is still at home" },
    from__to_:                              function() { return "from " + arguments[0] + " to " + arguments[1] },
    from__until_:                           function() { return "from " + arguments[0] + " until " + arguments[1] },
    between__and_:                          function() { return "between " + arguments[0] + " and " + arguments[1] },
    while_its_dark_outside_twilight:        function() { return "while it's dark outside" },
    while_its_dark_outside:                 function() { return "while it's dark outside" },
    while_the_sun_is_up_twilight:           function() { return "while the sun is up" },
    while_the_sun_is_up:                    function() { return "while the sun is up" },
    Indoor_localization_not_a:              function() { return "Indoor localization not available..." },
    We_need_at_least__Crownst:              function() { return "We need at least " + arguments[0] + " Crownstones to be able to determine which room you're in.\n\n" + arguments[1] },
    Not_all_rooms_are_trained:              function() { return "Not all rooms are trained yet!" },
    Make_sure_you_train_all_t:              function() { return "Make sure you train all the rooms in your Sphere in order to enable indoor localization." },
    _or_:                                   function() { return " or " },
  },
  AlexaOverview:{
    __filename: "../js/views/thirdParty/alexa/AlexaOverview.tsx",
    Working_with_Alexa:                     function() { return "Working with Alexa" },
    Crownstone_is_now_availab:              function() { return "Crownstone is now available as an Amazon Alexa skill!" },
    You_can_now_go_to_your_Al:              function() { return "You can now go to your Alexa App, navigate to the smart home are and install the Crownstone skill!" },
    You_will_receive_a_list_o:              function() { return "You will receive a list of all your Crownstones, which you can turn on and off via voice commands!" },
    When_you_tell_Alexa_to_sw:              function() { return "When you tell Alexa to switch on a Crownstone, Alexa will push a command to your phone, and have that switch the Crownstone." },
    Were_hard_at_work_adding_:              function() { return "We're hard at work adding more features, like dimming and location based utterances." },
    Expect_more_to_come_and_e:              function() { return "Expect more to come and enjoy using Alexa!" },
    Amazon_Alexa:                           function() { return "Amazon Alexa" },
  },
  AnimatedDoubleTap:{
    __filename: "../js/views/components/animated/AnimatedDoubleTap.tsx",
    __x__:                                  function() { return "1 x.." },
    __x_:                                   function() { return "2 x!" },
  },
  AppUtil:{
    __filename: "../js/util/AppUtil",
    Preparing_for_download___:              function() { return "Preparing for download..." },
    Clearing_database___:                   function() { return "Clearing database..." },
    Getting_new_data___:                    function() { return "Getting new data..." },
    Finalizing___:                          function() { return "Finalizing..." },
    App_will_close_in___secon:              function() { return "App will close in " + arguments[0] + " seconds.\n\nReopen the app to finalize the process." },
    Data_reset_failed___:                   function() { return "Data reset failed..." },
    Something_went_wrong_in_t:              function() { return "Something went wrong in the data reset process. The best way to solve this is to remove the app from your phone, reinstall it and log into you account" },
    Logging_out_and_closing_a:              function() { return "Logging out and closing app..." },
  },
  AutoArrangeButton:{
    __filename: "../../js/views/main/buttons/AutoArrangeButton.tsx",
    Auto_arrange_:                          function() { return "Auto arrange!" },
  },
  BleStateOverlay:{
    __filename: "../../js/views/overlays/BleStateOverlay.tsx",
    Bluetooth_disabled:                     function() { return "Bluetooth disabled" },
  },
  Button:{
    Yes:                                    function() { return "Yes" },
    No:                                     function() { return "No" },
  },
  CameraRollView:{
    __filename: "../js/views/cameraViews/CameraRollView.tsx",
    Select_your_Picture:                    function() { return "Select your Picture" },
  },
  CancelButton:{
    __filename: "../js/views/components/topbar/CancelButton.tsx",
    Cancel:                                 function() { return "Cancel" },
  },
  CloudChoice:{
    __filename: "../js/views/startupViews/CloudChoice.tsx",
    PLEASE_SELECT:                          function() { return "PLEASE SELECT" },
    Use_the_Cloud_to_store_da:              function() { return "Use the Cloud to store data" },
    The_cloud_is_used_to_allo:              function() { return "The cloud is used to allow multiple users to use your Crownstones. Crownstones, spheres, rooms are stored in the cloud and synces across devices." },
    Only_store_data_on_your_p:              function() { return "Only store data on your phone" },
    If_you_are_the_only_user_:              function() { return "If you are the only user, you can run everything locally. If you uninstall your app, you'll need to physically reset all your Crownstones." },
  },
  CreateSphere:{
    Could_not_create_sphere:                function() { return "Could not create sphere" },
    Please_try_again_later_:                function() { return "Please try again later." },
    _new:                                   function() { return " new" },
    Creating_Sphere___:                     function() { return "Creating Sphere..." },
  },
  DevIconSelection:{
    __filename: "../../js/views/development/DevIconSelection.tsx",
    HIDE:                                   function() { return "HIDE" },
    PRINT:                                  function() { return "PRINT" },
    UNHIDE_ALL:                             function() { return "UNHIDE ALL" },
  },
  DeviceAbilities:{
    __filename: "../../js/views/deviceViews/DeviceAbilities.tsx",
    My_Abilities:                           function() { return "My Abilities" },
    These_are_the_things_I_ca:              function() { return "These are the things I can do for you!\n" + (arguments[0] ? "You can enable or disable my abilities\nto suit your needs." : "The sphere admin can enable or disable\nmy abilities to suit your needs.") },
    Waiting_to_notify_the_nCr:              function() { return "Waiting to notify the\nCrownstone..." },
    Enabled:                                function() { return "Enabled" },
    Dimming:                                function() { return "Dimming" },
    Switchcraft:                            function() { return "Switchcraft" },
    Tap_to_toggle:                          function() { return "Tap-to-toggle" },
    Tap_to_toggle_is_disabled:              function() { return "Tap-to-toggle is disabled for all Crownstones in the app settings." },
    Use_modified_wall_switche:              function() { return "Use modified wall switches to switch both the Crownstone and the light. Tap the questionmark for more information." },
    Dimming_can_be_enabled_pe:              function() { return "Dimming can be enabled per Crownstone. It is up to you to make sure you are not dimming anything other than lights. To do so is at your own risk." },
    To_adjust_the_distance_se:              function() { return "To adjust the distance sensitivity of your phone to all Crownstones, take a look at the Settings -> App Settings." + " You can customize the sensitivity of this particular Crownstone by tapping on the cogwheel." },
    Enable_so_you_can_tap_you:              function() { return "Enable so you can tap your phone against this Crownstone toggle it on or off." },
    To_adjust_the_distance_sen:             function() { return "To adjust the distance sensitivity of your phone to all Crownstones, take a look at the Settings -> App Settings." + " You can customize the sensitivity of this particular Crownstone by tapping on the cogwheel." },
    Usually__Built_in_Crownst:              function() { return "Usually, Built-in Crownstones have tap-to-toggle disabled. But, if you enable it, you can hold your phone close to this Crownstone toggle it on or off." },
  },
  DeviceEdit:{
    __filename: "../js/views/deviceViews/DeviceEdit.tsx",
    _Are_you_sure___Removing__header:       function() { return "Are you sure?" },
    _Are_you_sure___Removing__body:         function() { return "Removing a Crownstone from the sphere will revert it to it's factory default settings." },
    _Are_you_sure___Removing__left:         function() { return "Cancel" },
    _Are_you_sure___Removing__right:        function() { return "Remove" },
    _Cant_see_this_one___We_c_header:       function() { return "Can't see this one!" },
    _Cant_see_this_one___We_c_body:         function() { return "We can't find this Crownstone while scanning. Can you move closer to it and try again? If you want to remove it from your Sphere without resetting it, press Delete anyway." },
    _Cant_see_this_one___We_c_left:         function() { return "Delete anyway" },
    _Cant_see_this_one___We_c_right:        function() { return "Cancel" },
    _Encountered_Cloud_Issue__header:       function() { return "Encountered Cloud Issue." },
    _Encountered_Cloud_Issue__body:         function() { return "We cannot delete this Crownstone in the cloud. Please try again later" },
    _Encountered_Cloud_Issue__left:         function() { return "OK" },
    _Encountered_a_problem____header:       function() { return "Encountered a problem." },
    _Encountered_a_problem____body:         function() { return "We cannot Factory reset this Crownstone. Unfortunately, it has already been removed from the cloud. " + "Try deleting it again or use the factory reset procedure to put it in setup mode." },
    _Encountered_a_problem____left:         function() { return "OK" },
    _Encountered_Cloud_Issue___header:      function() { return "Encountered Cloud Issue." },
    _Encountered_Cloud_Issue___body:        function() { return "We cannot delete this Crownstone in the cloud. Please try again later" },
    _Encountered_Cloud_Issue___left:        function() { return "OK" },
    _Success__arguments___OKn_header:       function() { return "Success!" },
    _Success__arguments___OKn_body:         function() { return arguments[0] },
    _Success__arguments___OKn_left:         function() { return "OK" },
    _Cant_see_this_stone___I__header:       function() { return "Can't see this stone!" },
    _Cant_see_this_stone___I__body:         function() { return "I have to be in range to get the firwmare version of this Crownstone." },
    _Cant_see_this_stone___I__left:         function() { return "OK" },
    _Whoops___I_could_not_get_header:       function() { return "Whoops!" },
    _Whoops___I_could_not_get_body:         function() { return "I could not get the firmware version...." },
    _Whoops___I_could_not_get_left:         function() { return "OK" },
    _Whoops___I_could_not_get__header:      function() { return "Whoops!" },
    _Whoops___I_could_not_get__body:        function() { return "I could not get the hardware version...." },
    _Whoops___I_could_not_get__left:        function() { return "OK" },
    Icon:                                   function() { return "Icon" },
    CROWNSTONE:                             function() { return "CROWNSTONE SETTINGS" },
    Name:                                   function() { return "Name" },
    Remove_from_Sphere:                     function() { return "Remove from Sphere" },
    Removing_this_Crownstone_:              function() { return "Removing this Crownstone from its Sphere will revert it back to factory defaults (and back in setup mode)." },
    Removing_this_Hub_:                     function() { return "Removing this Hub from its Sphere will revert it back to factory defaults (and back in setup mode)." },
    I_have_removed_this_Hub:                function() { return "I have removed this Hub from the Cloud, your Sphere and reverted it to factory defaults. You can new freely add it to another Sphere." },
    I_have_removed_this_Crown:              function() { return "I have removed this Crownstone from the Cloud, your Sphere and reverted it to factory defaults. After plugging it in and out once more, you can freely add it to a Sphere." },
    I_have_removed_this_Crowns:             function() { return "I have removed this Crownstone from the Cloud and your Sphere. I could not reset it back to setup mode though.. You'll need to factory reset it to put it back into setup mode." },
    Checking_versions____:                  function() { return "Checking versions... " },
    address__:                              function() { return "address: " + (arguments[0] || arguments[1]) },
    hardware_id__:                          function() { return "hardware id: " + (arguments[0] || arguments[1]) },
    bootloader__:                           function() { return "bootloader: " + (arguments[0] || arguments[1]) },
    firmware__:                             function() { return "firmware: " + (arguments[0] || arguments[1]) },
    crownstone_id__:                        function() { return "crownstone id: " + (arguments[0] || arguments[1]) },
    Pick_a_name:                            function() { return "Pick a name" },
    Delete_anyway:                          function() { return "Delete anyway" },
    CROWNSTONE_IS_IN_ROOM:                  function() { return "CROWNSTONE IS IN ROOM" },
    DANGER:                                 function() { return "DANGER" },
    unknown:                                function() { return "unknown" },
    Not_checked_:                           function() { return "Not checked." },
    Factory_resetting_the_Cro:              function() { return "Factory resetting the Crownstone..." },
    Removing_the_Crownstone_f:              function() { return "Removing the Crownstone from the Cloud..." },
    Removing_the_Crownstone_fr:             function() { return "Removing the Crownstone from the Cloud..." },
    Looking_for_the_Crownston:              function() { return "Looking for the Crownstone..." },
    Cant_see_this_one_:                     function() { return "Can't see this one!" },
    This_Crownstone_has_not_b:              function() { return "This Crownstone has not been seen for a while.. Can you move closer to it and try again? If you want to remove it from your Sphere without resetting it, press Delete anyway." },
    Cancel:                                 function() { return "Cancel" },
    __tap_to_change_:                       function() { return " (tap to change)" },
    Not_in_a_room:                          function() { return "Not in a room" },
    Description:                            function() { return "Description" },
    Optional:                               function() { return "Optional" },
  },
  DeviceEntry:{
    __filename: "../js/views/components/deviceEntries/DeviceEntry.tsx",
    Tap_me_for_more_:                       function() { return "Tap me for more!" },
    Tap_icon_to_quickly_dim_y:              function() { return "Tap icon to quickly dim your lights!" },
  },
  HubEntry:{
    __filename: "../js/views/components/deviceEntries/DeviceEntry.tsx",
    Tap_me_for_more_:                       function() { return "Tap me for more!" },
    Tap_icon_to_quickly_dim_y:              function() { return "Tap icon to quickly dim your lights!" },
  },
  DeviceEntrySubText:{
    __filename: "../js/views/components/deviceEntries/DeviceEntrySubText.tsx",
    _W:                                     function() { return arguments[0] + " W" },
    __Nearest_:                             function() { return " (Nearest)" },
    __Nearest_in_room_:                     function() { return " (Nearest in room)" },
    __Very_near_:                           function() { return " (Very near)" },
    __Near_:                                function() { return " (Near)" },
    _Nearest_:                              function() { return "(Nearest)" },
    _Very_near_:                            function() { return "(Very near)" },
    _Near_:                                 function() { return "(Near)" },
    Searching:                              function() { return "Searching..." },
  },
  DeviceError:{
    __filename: "../js/views/deviceViews/elements/DeviceError.tsx",
    Notify_an_admin_of_your_S:              function() { return "Notify an admin of your Sphere to resolve this error." },
    _Stone_unavailable___You__header:       function() { return "Stone unavailable." },
    _Stone_unavailable___You__body:         function() { return "You have to be in range of the Crownstone to reset the errors." },
    _Stone_unavailable___You__left:         function() { return "OK" },
  },
  DeviceIconSelection:{
    __filename: "../js/views/deviceViews/DeviceIconSelection.tsx",
    __new:                                  function() { return "__new" },
    miscLights:                             function() { return "Other lights" },
    furnitureLights:                        function() { return "Lights on furniture" },
    standingLights:                         function() { return "Standing lights" },
    ceilingLights:                          function() { return "Ceiling lights" },
    wallMountedLights:                      function() { return "Wall mounted lights" },
    Tech:                                   function() { return "Tech" },
    Screens:                                function() { return "Screens" },
    Entertainment:                          function() { return "Entertainment" },
    Music:                                  function() { return "Music" },
    Furniture:                              function() { return "Furniture" },
    Bathroom:                               function() { return "Bathroom" },
    Sockets:                                function() { return "Sockets" },
    Office:                                 function() { return "Office" },
    Bedroom:                                function() { return "Bedroom" },
    Tools:                                  function() { return "Tools" },
    Kitchen:                                function() { return "Kitchen" },
    Outside:                                function() { return "Outside" },
    Rides:                                  function() { return "Rides" },
    Miscellaneous:                          function() { return "Miscellaneous" },
    Pick_an_Icon:                           function() { return "Pick an Icon" },
  },
  DeviceOverview:{
    __filename: "../js/views/deviceViews/DeviceOverview.tsx",
    Edit:                                   function() { return "Edit" },
    Searching___:                           function() { return "Searching..." },
    Once_I_hear_from_this_Cro:              function() { return "Once I hear from this Crownstone, the button will reappear." },
    Abilities:                              function() { return "Abilities" },
    Behaviour:                              function() { return "Behaviour" },
    Power_usage:                            function() { return "Power usage" },
    OFF:                                    function() { return "OFF" },
    ON:                                     function() { return "ON" },
    Im_a__:                                 function() { return "I'm a " + arguments[0] + "!" },
    Currently__Im_in_the__:                 function() { return "Currently, I'm in the " + arguments[0] + "." },
    Hi_there_:                              function() { return "Hi there!" },
  },
  DevicePowerUsage:{
    __filename: "../../js/views/deviceViews/DevicePowerUsage.tsx",
    Power_Usage:                            function() { return "Power Usage" },
    Real_time_power_usage:                  function() { return "Real time power usage of this Crownstone!" },
    Stand_near_the_Crownstone:              function() { return "Stand near the Crownstone to see the measurements flowing in! It will only measure if the app is in the foreground and you have this screen in front of you. "},
    Power_usage_:                           function() { return "Power usage: " },
  },
  DeviceSmartBehaviour:{
    __filename: "../js/views/deviceViews/elements/smartBehaviour/DeviceSmartBehaviour.tsx",
    My_Behaviour:                           function() { return "My Behaviour" },
    Add_more___:                            function() { return "Add new behaviour..." },
    Copy_from___:                           function() { return "Copy from..." },
    Copy_to___:                             function() { return "Copy to..." },
    Add_my_first_behaviour_:                function() { return "Add my first behaviour!" },
    Copy_from_another_Crownst:              function() { return "Copy from another Crownstone!" },
    This_Crownstone_is_locked:              function() { return "This Crownstone is locked, so the behaviours will not be acted upon." },
    Ill_be_off_if_Im_not_supp:              function() { return "I'll be off if I'm not supposed to be on." + (arguments[0] ? "\nOnce everyone left the " + (arguments[1] ? "room" : "house") + " I'll wait 5 minutes before turning off." : "") },
    What_is_Behaviour_:                     function() { return "What is Behaviour?" },
    My_behaviour_is_a_combina:              function() { return "My behaviour is a combination of presence awareness, a schedule and responding to your actions." },
    I_can_take_multiple_peopl:              function() { return "I can take multiple people in your household into account, or I could turn a light on at 50% when you use your wall switches after dark." },
    Tap_the_Add_button_below_:              function() { return "Tap the Add button below to get started or copy the behaviour from another Crownstone!" },
    Behaviour_is_currently_di:              function() { return "Behaviour is currently disabled." },
    Tap_here_to_re_enable_beh:              function() { return "Tap here to re-enable behaviour." },
    _Copying_will_override_ex_header:       function() { return "Copying will override existing Behaviour" },
    _Copying_will_override_ex_body:         function() { return "If you copy behaviour from another Crownstone, it's behaviour will replace the current behaviour. Do you want to continue?" },
    _Copying_will_override_ex_left:         function() { return "Never mind" },
    _Copying_will_override_ex_right:        function() { return "Yes" },
    _You_dont_have_permission_header:       function() { return "You don't have permission to do this." },
    _You_dont_have_permission_body:         function() { return "Only admins or members can update Crownstones." },
    _You_dont_have_permission_left:         function() { return "OK" },
    _You_dont_have_permission__header:      function() { return "You don't have permission to do this." },
    _You_dont_have_permission__body:        function() { return "Only admins or members can update Crownstones." },
    _You_dont_have_permission__left:        function() { return "OK" },
    _You_dont_have_permission_t_header:     function() { return "You don't have permission to do this." },
    _You_dont_have_permission_t_body:       function() { return "Only admins or members can update Crownstones." },
    _You_dont_have_permission_t_left:       function() { return "OK" },
    _Success___Behaviour_has__header:       function() { return "Success!" },
    _Success___Behaviour_has__body:         function() { return "Behaviour has been copied!" },
    _Success___Behaviour_has__left:         function() { return "Great!" },
    Stone_deleted_:                         function() { return "Stone deleted." },
    Shall_I_copy_the_behaviou:              function() { return "Shall I copy the behaviour from " + arguments[0] + "?" },
  },
  DeviceSmartBehaviour_CopyStoneSelection:{
    __filename: "../../js/views/deviceViews/smartBehaviour/DeviceSmartBehaviour_CopyStoneSelection.tsx",
    Allow:                                  function() { return "Allow" },
    Enable_nDimming:                        function() { return "Enable\nDimming" },
    _No_Crownstone_selected___header:       function() { return "No Crownstone selected!" },
    _No_Crownstone_selected___body:         function() { return "Select at least one Crownstone to copy behaviour to. You can tap on them to select!" },
    _No_Crownstone_selected___left:         function() { return "OK" },
    Existing_behaviour_will_b:              function() { return "Existing behaviour will be overwritten." },
    Behaviours_available_to_c:              function() { return "Behaviours available to copy!" },
    No_behaviours_to_copy___:               function() { return "No behaviours to copy..." },
    Existing_behaviour_will_be:             function() { return "Existing behaviour will be overwritten." },
    __Tap_to_select_:                       function() { return " (Tap to select)" },
    _n_Tap_to_select_:                      function() { return "\n(Tap to select)" },
    Who_I_shall_copy_my_behav:              function() { return "Who I shall copy my behaviour to?" },
    Who_shall_I_copy_behaviou:              function() { return "Who shall I copy behaviour from?" },
    Copy_from_whom_:                        function() { return "Copy from whom?" },
    Copy_to_whom_:                          function() { return "Copy to whom?" },
    Select:                                 function() { return "Select" },
    Firmware_update_required_:              function() { return "Firmware update required..." },
    Dimming_is_required_to_co:              function() { return "Dimming is required to copy this behaviour." },
    This_is_me_:                            function() { return "This is me!" },
  },
  DeviceSmartBehaviour_Editor:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/DeviceSmartBehaviour_Editor.tsx",
    Create_my_Behaviour:                    function() { return "Create my Behaviour" },
    Tap_the_underlined_parts_t:             function() { return "Tap the underlined parts to customize them!" },
    Edit_Behaviour:                         function() { return arguments[0] || "Edit Behaviour" },
    Customize_my_Behaviour_:                function() { return "Customize my Behaviour!" },
  },
  DeviceSmartBehaviour_TypeSelector:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/DeviceSmartBehaviour_TypeSelector.tsx",
    Presence_aware:                         function() { return "Presence aware" },
    Smart_timer:                            function() { return "Smart timer" },
    Twilight_mode:                          function() { return "Twilight mode" },
    Yes__enable_dimming_:                   function() { return "Yes, enable dimming!" },
    Not_right_now__:                        function() { return "Not right now.." },
    What_sort_of_behaviour_sh:              function() { return "What sort of behaviour shall I learn?" },
    Pick_a_type_to_start_with:              function() { return "Pick a type to start with:" },
    Pick_a_different_example_:              function() { return "Pick a different example as a starting point." },
    Presence_Aware_Behaviour:               function() { return "Presence Aware Behaviour" },
    Smart_Timer:                            function() { return "Smart Timer" },
    Dimming_required:                       function() { return "Dimming required" },
    Twilight_requires_me_to_b:              function() { return "Twilight requires me to be able to dim. Would you like to enable the dimming ability on this Crownstone?" },
    Pick_an_example_and_chang:              function() { return "Pick an example and change it to your liking!" },
    Pick_an_example_and_change:             function() { return "Pick an example and change it to your liking!" },
    Pick_an_example_and_change_:            function() { return "Pick an example and change it to your liking!" },
    Twilight_Mode:                          function() { return "Twilight Mode" },
    Presence_Aware:                         function() { return "Presence Aware" },
  },
  DeviceSmartBehaviour_Wrapup:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/supportComponents/DeviceSmartBehaviour_Wrapup.tsx",
    After_this_behaviour__I_w:              function() { return "After this behaviour, I won't turn off as long as someone is home. This is done by automatically adding another rule that will keep me on for you. This will last until sunrise, give it a try!" },
    I_wont_turn_off_as_long_a:              function() { return "I won't turn off as long as someone is in the room. This is done by automatically another rule that will keep me on for you. This will last until sunrise, give it a try!" },
    Tap_the_days_below_to_let:              function() { return "Let me know when I should act on this behaviour! I'll do it on every green day.\n\n You can tap the day to change it!\n\n" + "If a behaviour is started on an active day, it will not just stop at midnight but logically finish up." },
    _Never___Please_pick_at_l_header:       function() { return "Never?" },
    _Never___Please_pick_at_l_body:         function() { return "Please pick at least 1 day for this behaviour!" },
    _Never___Please_pick_at_l_left:         function() { return "OK" },
    ____:                                   function() { return "\"" + arguments[0] + "\"" },
    _Behaviour_already_exists_header:       function() { return "Behaviour already exists!" },
    _Behaviour_already_exists_body:         function() { return "You already have a behaviour that does exactly this. There's no need to add another!" },
    _Behaviour_already_exists_left:         function() { return "OK" },
    When_to_do_this_:                       function() { return "When to do this?" },
    When_shall_I_use_the_modi:              function() { return "When shall I use the modified behaviour?" },
    You_can_quickly_apply_you:              function() { return "You can quickly apply your changes to multiple days!" },
    Only_change__:                          function() { return "Only change " + arguments[0] + "." },
    Change_everywhere_:                     function() { return "Change everywhere!" },
    From_which_days_shall_I_r:              function() { return "From which days shall I remove this behaviour?" },
    Select_the_days_you_wish_:              function() { return "Select the days you wish to remove this behaviour from. I've already selected the day you picked as one to remove." },
    Remove_behaviour_:                      function() { return "Remove behaviour!" },
    Remove_only__:                          function() { return "Remove only " + arguments[0] + "." },
    Remove_everywhere_:                     function() { return "Remove everywhere!" },
    Never_mind___:                          function() { return "Never mind..." },
    This_will_replace_the_fol:              function() { return "This will replace the following behaviours on " + arguments[0] + ":" },
    Cancel:                                 function() { return "Cancel" },
    When_do_I_do_this_:                     function() { return "When do I do this?" },
    Thats_it_:                              function() { return "That's it!" },
    Every_day_:                             function() { return "Every day?" },
  },
  DeviceUpdate:{
    __filename: "../js/views/deviceViews/elements/DeviceUpdate.tsx",
    Lets_get_started_:                      function() { return "Let's get started!" },
  },
  DfuBatch:{
    __filename: "../../js/views/dfu/DfuBatch.tsx",
    Updating_:                              function() { return "Updating!" },
    Updating_your_Crownstones_:             function() { return "Updating your Crownstones!" },
    This_can_take_a_while_so_j:             function() { return "This can take a while so just put your phone down, relax and grab some coffee. I'll let you know when everything is ready!" },
    Some_Crownstones_may_turn:              function() { return "Some Crownstones may turn on while updating." },
    _This_process_cannot_be_i_header:       function() { return "This process cannot be interrupted." },
    _This_process_cannot_be_i_body:         function() { return "Please wait until the update cycle is completed." },
    _This_process_cannot_be_i_left:         function() { return "OK" },
    Cancelling_after_this_Cro:              function() { return "Cancelling after this Crownstone..." },
  },
  DfuDeviceEntry:{
    __filename: "../js/views/components/deviceEntries/DfuDeviceEntry.tsx",
    _You_dont_have_permission_header:       function() { return "You don't have permission." },
    _You_dont_have_permission_body:         function() { return "You can ask an admin in your Sphere to update this Crownstone" },
    _You_dont_have_permission_left:         function() { return "OK" },
    Tap_here_to_configure_me_:              function() { return "Tap here to configure me!" },
    _Very_Near_:                            function() { return "(Very Near)" },
    _Near_:                                 function() { return "(Near)" },
    _Visible_:                              function() { return "(Visible)" },
    _Barely_visible_:                       function() { return "(Barely visible)" },
    _Too_far_away_:                         function() { return "(Too far away)" },
    Working___:                             function() { return arguments[0] && "Working..." || "" },
  },
  DfuDeviceOverviewEntry:{
    __filename: "../../js/views/components/deviceEntries/DfuDeviceOverviewEntry.tsx",
    Searching___:                           function() { return "Searching..." },
    Located_in__:                           function() { return "Located in " + arguments[0] + "." },
    Close_enough_for_update_:               function() { return "Close enough for update!" },
    In_range_but_not_close_eno:             function() { return "In range but not close enough yet!" },
    _Update_just_this_Crownst_header:       function() { return "Update just this Crownstone?" },
    _Update_just_this_Crownst_body:         function() { return "The rest will be ignored for now.\nOnly developers can do this." },
    _Update_just_this_Crownst_left:         function() { return "Nevermind" },
    _Update_just_this_Crownst_right:        function() { return "Let's do it!" },
  },
  DfuDeviceUpdaterEntry:{
    __filename: "../../js/views/components/deviceEntries/DfuDeviceUpdaterEntry.tsx",
    Step______:                             function() { return "Step " + arguments[0] + " / " + arguments[1] + "\n" + arguments[2] },
    Update_in_progress___:                  function() { return "Update in progress..." },
    Preparing_for_update:                   function() { return "Preparing for update..." },
    Waiting_for_update___:                  function() { return "Waiting for update..." },
    Update_finished_:                       function() { return "Update finished!" },
    Update_failed__Ill_retry_i:             function() { return "Update failed, I'll retry it!" },
    Preparing___:                           function() { return "Preparing..." },
    Getting_update_informatio:              function() { return "Getting update information..." },
    Looking_for_Crownstone___:              function() { return "Looking for Crownstone..." },
    Checking_versions___:                   function() { return "Checking versions..." },
    Checking_Firmware_version:              function() { return "Checking Firmware version..." },
    Checking_Bootloader_versi:              function() { return "Checking Bootloader version..." },
    Checking_Bootloader_steps:              function() { return "Checking Bootloader steps..." },
    Preparing_Crownstone_for_:              function() { return "Preparing Crownstone for update..." },
    Checking_Firmware_steps__:              function() { return "Checking Firmware steps..." },
    Updating_Bootloader___:                 function() { return "Updating Bootloader..." },
    Updating_Firmware___:                   function() { return "Updating Firmware..." },
    Finalizing___:                          function() { return "Finalizing..." },
  },
  DfuFinished:{
    __filename: "../../js/views/dfu/DfuFinished.tsx",
    Not_right_now___:                       function() { return "Not right now..." },
    Yes_:                                   function() { return "Yes!" },
    Thats_enough_for_now___:                function() { return "That's enough for now..." },
    Lets_do_the_rest_of_them_:              function() { return "Let's do the rest of them!" },
    Great_:                                 function() { return "Great!" },
    Ill_try_again_later_:                   function() { return "I'll try again later!" },
    Something_went_wrong_whil:              function() { return "Something went wrong while updating the Crownstones..." },
    Would_you_like_to_retry_:               function() { return "Would you like to retry?" },
    Crownstones_successfully_:              function() { return "Crownstones successfully updated!" },
    There_is_just___left_to_g:              function() { return "There is just 1 left to go!" },
    There_are_just__left_to_g:              function() { return "There are just " + arguments[0] + " left to go!" },
    Crownstones_successfully_u:             function() { return "Crownstones successfully updated!" },
    All_your_Crownstones_are_:              function() { return "All your Crownstones are now up to date! Enjoy!" },
    I_could_not_download_the_:              function() { return "I could not download the new versions..." },
    Please_check_if_youre_con:              function() { return "Please check if you're connected to the internet and try again." },
  },
  DfuIntroduction:{
    __filename: "../js/views/overlays/DfuOverlay.tsx",
    Not_right_now___:                       function() { return "Not right now..." },
    Lets_do_it_:                            function() { return "Let's do it!" },
    Start_the_update_:                      function() { return "Start the update!" },
    Ill_try_again_later_:                   function() { return "I'll try again later!" },
    Downloading___:                         function() { return "Downloading..." },
    There_is_an_update_availa:              function() { return "There is an update available for your Crownstones!" },
    This_process_can_take_a_f:              function() { return "This process can take a few minutes. Would you like to start now?" },
    Heres_whats_new_:                       function() { return "Here's what's new!" },
    There_is_an_update_availab:             function() { return "There is an update available for your Crownstones!" },
    ____but_need_to_be_in_you:              function() { return "... but need to be in your Sphere to update your Crownstones." },
  },
  DfuScanning:{
    __filename: "../../js/views/dfu/DfuScanning.tsx",
    Looking_for_Crownstones:                function() { return "Looking around..." },
    Collecting_nearby_Crownsto:             function() { return "Collecting nearby Crownstones to update..." },
    Crownstones_turn_green_onc:             function() { return "Crownstones turn green once you're near enough. These will be updated when you press next. You can do this multiple times to get all of them!" },
    _No_Crownstones_in_range__header:       function() { return "No Crownstones in range yet." },
    _No_Crownstones_in_range__body:         function() { return "Please go near your Crownstones until they show up green in the list." },
    _No_Crownstones_in_range__left:         function() { return "OK" },
    Lets_update_:                           function() { return "Lets update!" },
  },
  DfuUtil:{
    Could_not_download_releas:              function() { return "Could not download release notes..." },
    Release_notes_not_availab:              function() { return "Release notes not available." },
  },
  DiagnosticUtil:{
    __filename: "../js/views/settingsViews/diagnostics/DiagnosticUtil.tsx",
    To_Mesh_Topology:                       function() { return "To Mesh Topology" },
    Go_to_Overview:                         function() { return "Go to Overview" },
    Quit_app_now:                           function() { return "Quit app now" },
    Open_Troubleshooter:                    function() { return "Open Troubleshooter" },
    To_Help_screen:                         function() { return "To Help screen" },
    Which_Crownstone_is_givin:              function() { return "Which Crownstone is giving problems?" },
    Scroll_down_to_see_all_of:              function() { return "Scroll down to see all of them." },
    _in_:                                   function() { return " in " + arguments[0] },
    No:                                     function() { return "No" },
    Yes:                                    function() { return "Yes" },
    ____:                                   function() { return arguments[0] + (arguments[1] ? "..." : ".") },
  },
  DimLevelOverlay:{
    Save:                                   function() { return "Save" },
    Dim_how_much_:                          function() { return "Dim how much?" },
    _:                                      function() { return arguments[0] + "%" },
  },
  DimmerSlider:{
    __filename: "../../js/views/components/DimmerSlider.tsx",
    The_dimmer_is_starting_up:              function() { return "The dimmer is starting up..." },
    Smooth_sliding_will_be_av:              function() { return "Smooth sliding will be available once I'm close enough to the Crownstone to enable dimming on it." },
  },
  Dropdown:{
    __filename: "../js/views/components/editComponents/Dropdown.tsx",
    Cancel:                                 function() { return "Cancel" },
    Done:                                   function() { return "Done" },
  },
  EditableItem:{
    __filename: "../js/views/components/EditableItem.tsx",
    ___UNHANDLED_for_:                      function() { return arguments[0] + " - Editable item unknown type:" + arguments[1] },
  },
  ErrorContent:{
    Oh_no__The_Crownstone_tri_noDimming:    function() { return "Oh no! The Crownstone overheated! I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__The_Crownstone_tri:              function() { return "Oh no! The Crownstone tried to dim your device for you, but there was so much power required that the Crownstone overheated! I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__I_have_detected_a_:              function() { return "Oh no! I have detected a problem with the dimmer funtionality. I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__I_have_detected_a__noDimming:    function() { return "Oh no! Something went wrong with your Crownstone. I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__I_have_detected_a_p:             function() { return "Oh no! I have detected a problem with the dimmer funtionality. I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__I_have_detected_a_p_noDimming:   function() { return "Oh no! Something went wrong with your Crownstone. I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Oh_no__The_Crownstone_got:              function() { return "Oh no! The Crownstone got way too warm! I had to switch it off to protect you and your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Just_in_time__I_detected_:              function() { return "Just in time! I detected that the device that you tried to dim uses more power than is safe (100 W). I turned on the relay to protect your devices.\n\nFind and tap on the Crownstone to resolve this error." },
    Just_in_time__I_detected_t:             function() { return "Just in time! I detected that the connected device uses more current than is safe (16 A). I had to turn it off.\n\nFind and tap on the Crownstone to resolve this error." },
    This_Crownstone_needs_to_:              function() { return "This Crownstone needs to be restarted.\n\nFind and tap on the Crownstone to continue." },
    This_Crownstone_became_to:              function() { return "This Crownstone became too warm because it used so much power during dimming!\n\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    This_Crownstone_became_to_noDimming:    function() { return "This Crownstone became too warm!\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    I_detected_a_problem_with:              function() { return "I detected a problem with the dimmer functionality. I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    I_detected_a_problem_with_noDimming:    function() { return "I detected a problem with your Crownstone. I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    I_detected_a_problem_with_:             function() { return "I detected a problem with the dimmer functionality. I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    I_detected_a_problem_with__noDimming:   function() { return "I detected a problem with your Crownstone. I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at http://www.crownstone.rocks resolve this." },
    The_Crownstone_got_way_to:              function() { return "The Crownstone got way too warm! I had to switch it off to protect you and your devices.\n\nIf you reset the error, you will be able to use it again, but check if your devices do not use too much power." },
    I_detected_that_the_devic:              function() { return "I detected that the device that you tried to dim uses more power than is safe (100 W). I had to turn on the relay to protect your devices.\n\nIf you reset the error, you will be able to use it again." },
    I_detected_that_the_conne:              function() { return "I detected that the connected device uses more current than is safe (16 A). I had to disable it.\n\nIf you reset the error, you will be able to use it again." },
    This_Crownstone_needs_to_b:             function() { return "This Crownstone needs to be restarted." },
    This_Crownstone_became_too:             function() { return "This Crownstone became too warm because it used so much power during dimming!" },
    This_Crownstone_became_too_noDimming:   function() { return "This Crownstone became too warm!" },
    I_detected_a_problem_with_t:            function() { return "I detected a problem with the dimmer functionality." },
    I_detected_a_problem_with_t_noDimming:  function() { return "I detected a problem with your Crownstone." },
    I_detected_a_problem_with_th:           function() { return "I detected a problem with the dimmer functionality." },
    I_detected_a_problem_with_th_noDimming: function() { return "I detected a problem with your Crownstone." },
    The_Crownstone_got_way_too:             function() { return "The Crownstone got way too warm! I had to switch it off to protect you and your devices." },
    I_detected_that_the_device:             function() { return "I detected that the device that you tried to dim uses more power than is safe (100 W). I had to turn on the relay to protect your devices." },
    I_detected_that_the_connec:             function() { return "I detected that the connected device uses more current than is safe (16 A). I had to disable it." },
    This_Crownstone_needs_to_be:            function() { return "This Crownstone needs to be restarted." },
    You_can_reset_this_error_:              function() { return "You can reset this error to restore functionality. If this happens more often, contact us at ask" + arguments[0] + arguments[1] + "." + arguments[2] + " to resolve this." },
    I_turned_on_the_relay_to_:              function() { return "I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at ask" + arguments[0] + arguments[1] + "." + arguments[2] + " to resolve this." },
    I_turned_on_the_relay_to_p:             function() { return "I turned on the relay to protect your devices.\n\nYou can reset this error to restore functionality. If this happens more often, contact us at ask" + arguments[0] + arguments[1] + "." + arguments[2] + " to resolve this." },
    If_you_reset_the_error__y:              function() { return "If you reset the error, you will be able to use it again, but check if your devices do not use too much power." },
    Reset_the_error_to_restor:              function() { return "Reset the error to restore normal functionality. Try to keep the power usage down next time." },
    Reset_the_error_to_restore:             function() { return "Reset the error to restore normal functionality. Try to keep the power usage down next time." },
    If_this_happens_more_ofte:              function() { return "If this happens more often, contact us at ask" + arguments[0] + arguments[1] + "." + arguments[2] },
    Ill_keep_an_eye_on_it_:                 function() { return "I'll keep an eye on it!" },
    Understood_:                            function() { return "Understood." },
    I_wont_do_it_again_:                    function() { return "I won't do it again!" },
    Restart_Crownstone_:                    function() { return "Restart Crownstone." },
  },
  ErrorOverlay:{
    __filename: "../js/views/overlays/ErrorOverlay.tsx",
    Find_Crownstone:                        function() { return "Find Crownstone" },
    Crownstone_Hardware_Error:              function() { return "Crownstone Hardware Error" },
    __Yours__:                              function() { return "~ Yours, " + arguments[0] },
  },
  GoogleAssistantOverview:{
    Google_Assistant:                       function() { return "Google Assistant" },
    Ok_Google__turn_me_on_:                 function() { return "Ok Google, turn me on!" },
    Crownstone_is_now_availab:              function() { return "Crownstone is now available as a Google Assistant Action!" },
    You_can_now_go_to_your_Go:              function() { return "You can now go to your Google Assistant App, navigate to Devices, Add... and link a smart home device!" },
    After_linking_you_can_con:              function() { return "After linking you can control all your Crownstons via Google Home and Google Assistant!" },
    When_you_tell_Google_to_s:              function() { return "When you tell Google to switch on a Crownstone, Google will push a command to your phone, and have that switch the Crownstone." },
    Enjoy_using_your_Google_A:              function() { return "Enjoy using your Google Assistant!" },
  },
  GraphAxis:{
    __filename: "../js/views/components/graph/GraphComponents/GraphAxis.tsx",
    _W_:                                    function() { return "(W)" },
  },
  HubEdit:{
    __filename: "../js/views/hubViews/HubEdit.tsx",
    _Success__arguments___OKn_header:       function() { return "Success!" },
    _Success__arguments___OKn_body:         function() { return arguments[0] },
    _Success__arguments___OKn_left:         function() { return "OK" },
    Icon:                                   function() { return "Icon" },
    Remove_from_Sphere:                     function() { return "Remove from Sphere" },
    I_have_removed_this_Hub:                function() { return "I have removed this Hub from the Cloud, your Sphere and reverted it to factory defaults. You can new freely add it to another Sphere." },
    DANGER:                                 function() { return "DANGER" },
    Cancel:                                 function() { return "Cancel" },
    __tap_to_change_:                       function() { return " (tap to change)" },
    Not_in_a_room:                          function() { return "Not in a room" },
  },
  IconDevSelector:{
    __filename: "../../js/views/development/IconDevSelector.tsx",
    Pick_an_Icon:                           function() { return "Pick an Icon" },
  },
  InSphere:{
    __filename: "../js/views/settingsViews/diagnostics/InSphere.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Perhaps_the_Help_menu_can:              function() { return "Perhaps the Help menu can help you further." },
    Everything_is_working_pro:              function() { return "Everything is working properly." },
    You_can_close_the_diagnos:              function() { return "You can close the diagnostics now.\n\nPress the button below to go back." },
    What_are_you_having_probl:              function() { return "What are you having problems with?" },
    Scroll_down_to_see_all_op:              function() { return "Scroll down to see all options." },
    You_re_in_your_sphere_and:              function() { return "You're in your Sphere, and scanning is working as it should be." },
    Are_you_experiencing_any_:              function() { return "Are you experiencing any problems?" },
    You_do_not_have_permissio:              function() { return "You do not have permission to invite users to this Sphere...." },
    You_will_have_to_ask_a_me:              function() { return "You will have to ask a member or an admin to invite other users." },
    You_can_add_people_to_thi:              function() { return "You can add people to this Sphere by tapping on the '+' button in the lower right hand corner of the Sphere overview. From there, tap Person!" },
    Alternatively_you_can_tap:              function() { return "Alternatively, you can tap 'Edit' in the top right hand corner of the Sphere overview. Tap on the Users item and select Invite someone new at the bottom!" },
    Alternatively_you_can_send:             function() { return "Alternatively you can send us an email at team@crownstone.rocks and we'll do our best to help you!" },
    aCrownstone:                            function() { return "A Crownstone." },
    theIndoorLocalization:                  function() { return "The indoor localization." },
    invitingUsers:                          function() { return "Inviting users." },
    other___:                               function() { return "Other..." },
    Youre_in_your_Sphere_:                  function() { return "You're in your Sphere!" },
  },
  Interview:{
    __filename: "../../js/views/components/Interview.tsx",
    Something_went_wrong__Plea:             function() { return "Something went wrong. Please retry." },
  },
  InterviewDark:{
    __filename: "../../js/_prototyping/InterviewDark.tsx",
    When_someone_is_at_home_:               function() { return "When someone is at home." },
    When_its_dark_outside_:                 function() { return "When it's dark outside." },
    Between_certain_times_:                 function() { return "Between certain times." },
    All_day:                                function() { return "All day." },
    When_the_sun_is_up_:                    function() { return "When the sun is up." },
    Always_is_fine_:                        function() { return "Always is fine." },
    Yes_:                                   function() { return "Yes." },
    No_:                                    function() { return "No." },
    Whats_Switchcraft_:                     function() { return "What's Switchcraft?" },
    Nope_:                                  function() { return "Nope." },
    Yes__please_:                           function() { return "Yes, please." },
    When_someone_is_in_the_roo:             function() { return "When someone is in the room." },
    Stay_on_as_long_as_theres_:             function() { return "Stay on as long as there's somebody in the room." },
    Stay_on_as_long_as_somebod:             function() { return "Stay on as long as somebody is home." },
    Yes__you_can_turn_off_at__:             function() { return "Yes, you can turn off at " + arguments[0] + "." },
    Yes__be_on_if_someone_is_i:             function() { return "Yes, be on if someone is in the room." },
    Yes__be_on_if_someone_is_at:            function() { return "Yes, be on if someone is at home." },
    No__you_can_ignore_presenc:             function() { return "No, you can ignore presence." },
    No__just_dont_switch_autom:             function() { return "No, just don't switch automatically!" },
  },
  InterviewLight:{
    __filename: "../../js/_prototyping/InterviewLight.tsx",
    When_someone_is_at_home_:               function() { return "When someone is at home." },
    When_its_dark_outside_:                 function() { return "When it's dark outside." },
    Between_certain_times_:                 function() { return "Between certain times." },
    All_day:                                function() { return "All day." },
    When_the_sun_is_up_:                    function() { return "When the sun is up." },
    Always_is_fine_:                        function() { return "Always is fine." },
    Yes_:                                   function() { return "Yes." },
    No_:                                    function() { return "No." },
    Whats_Switchcraft_:                     function() { return "What's Switchcraft?" },
    Nope_:                                  function() { return "Nope." },
    Yes__please_:                           function() { return "Yes, please." },
    When_someone_is_in_the_roo:             function() { return "When someone is in the room." },
    Stay_on_as_long_as_theres_:             function() { return "Stay on as long as there's somebody in the room." },
    Stay_on_as_long_as_somebod:             function() { return "Stay on as long as somebody is home." },
    Yes__you_can_turn_off_at__:             function() { return "Yes, you can turn off at " + arguments[0] + "." },
    Yes__be_on_if_someone_is_i:             function() { return "Yes, be on if someone is in the room." },
    Yes__be_on_if_someone_is_at:            function() { return "Yes, be on if someone is at home." },
    No__you_can_ignore_presenc:             function() { return "No, you can ignore presence." },
    No__just_dont_switch_autom:             function() { return "No, just don't switch automatically!" },
  },
  InviteCenter:{
    __filename: "../../js/backgroundProcesses/InviteCenter.tsx",
    Accept:                                 function() { return "Accept" },
    Decline:                                function() { return "Decline" },
    Your_invitation_awaits_:                function() { return "Your invitation awaits!" },
    You_have_been_invited_:                 function() { return "You have been invited!" },
    You_have_been_invited_to_j:             function() { return "You have been invited to join the sphere called " + arguments[0] + "!\n\nDo you accept?" },
    _Welcome___The_invitation__header:      function() { return "Welcome!" },
    _Welcome___The_invitation__body:        function() { return "The invitation has been accepted!" },
    _Welcome___The_invitation__left:        function() { return "OK!" },
    _Something_went_wrong_____Y_header:     function() { return "Something went wrong..." },
    _Something_went_wrong_____Y_body:       function() { return "You can try again later or accept via the email that was sent to you" },
    _Something_went_wrong_____Y_left:       function() { return "OK" },
    _Something_went_wrong_____Yo_header:    function() { return "Something went wrong..." },
    _Something_went_wrong_____Yo_body:      function() { return "You can try again later or decline via the email that was sent to you" },
  },
  LibMessages:{
  },
  ListOverlay:{
    __filename: "../../js/views/overlays/ListOverlay.tsx",
    Save_selection_:                        function() { return arguments[0] || "Save selection!" },
  },
  LocalNotifications:{
    New_Message_Found:                      function() { return "New Message Found" },
    New_Message_Found_n:                    function() { return "New Message Found\n" },
    __Message_found___:                     function() { return "  Message found!  " },
  },
  LocalizationSetupStep1:{
    __filename: "../js/views/overlays/LocalizationSetupStep1.tsx",
    Congratulations_:                       function() { return "Congratulations!" },
    You_have_added___Crownsto:              function() { return "You have added 4 Crownstones to your Sphere! We can now use the indoor localization at room level!" },
    Weve_added_this_button_to:              function() { return "We've added this button to your overview:" },
    Once_youve_added_all_your:              function() { return "Once you've added all your Crownstones, tap that button to start teaching Crownstone about your home!" },
    OK_:                                    function() { return "OK!" },
  },
  LocalizationSetupStep2:{
    __filename: "../js/views/overlays/LocalizationSetupStep2.tsx",
    The_Next_Step:                          function() { return "The Next Step" },
    You_can_now_teach__when_y:              function() { return "You can now teach me to find you in certain rooms. " + "This new icon indicates that I am ready to learn how to identify this room!" },
    Once_youre_ready__tap_one:              function() { return "Once you're ready, tap one to start training!" },
  },
  LocationHandler:{
    __filename: "../js/native/localization/LocationHandler.ts",
    Could_not_set_Keys_:                    function() { return "Could not set Keys!" },
    This_should_not_happen__M:              function() { return "This should not happen. Make sure you're an admin to avoid this. This will be fixed soon!" },
    OK___:                                  function() { return "OK..." },
    Please_forgive_me___:                   function() { return "Please forgive me :(" },
    Due_to_many_improvements_:              function() { return "Due to many improvements in the localization you will have to train your rooms again..." },
  },
  LocationPermissionOverlay:{
    __filename: "../js/views/overlays/LocationPermissionOverlay.tsx",
    Request_Permission:                     function() { return "Request Permission" },
    Request_failed____Youll_h:              function() { return "" + "Request failed... You'll have to manually enable location access for the Crownstone app in your phone's settings." },
    _Request_not_allowed______header:       function() { return "Request not allowed...." },
    _Request_not_allowed______body:         function() { return "Please ensure that the permission is set to always. If it is always already, please set it to while in use, and back to always." },
    _Request_not_allowed______left:         function() { return "OK" },
    Only_while_in_app_permiss:              function() { return "Only while-in-app permissions granted." },
    Location_Services_are_on_:              function() { return "Location Services are on!" },
    Location_Services_are_dis:              function() { return "Location Services are disabled." },
    Location_permission_missi:              function() { return "Location permission missing." },
    Starting_Location_Service:              function() { return "Starting Location Services ..." },
    Crownstone_cannot_react_t:              function() { return "Crownstone cannot react to your presence while the app is in the background with this permission." },
    Everything_is_great_:                   function() { return "Everything is great!" },
    Without_location_services:              function() { return "Without location services, Crownstones cannot respond to your location and the app can\'t communicate with Crownstones correctly. This permission is required for the app to function." },
    This_should_not_take_long:              function() { return "This should not take long!" },
  },
  LockOverlay:{
    __filename: "../js/views/overlays/LockOverlay.tsx",
    Only_Admins_have_permissi:              function() { return "Only Admins have permission to lock Crownstones..." },
    You_can_only_lock_Crownst:              function() { return "You can only lock Crownstones that do not have dimming enabled." },
    You_can_lock_this_Crownst_off:          function() { return "You can lock this Crownstone so it will not turn off without someone unlocking it first." },
    You_can_lock_this_Crownst:              function() { return "You can lock this Crownstone so it will not turn on without someone unlocking it first." },
    Locking_Crownstone___:                  function() { return "Locking Crownstone..." },
    _Im_sorry____Something_we_header:       function() { return "I'm sorry.." },
    _Im_sorry____Something_we_body:         function() { return "Something went wrong while locking this Crownstone. Make sure you're near the Crownstone that you want to lock." },
    _Im_sorry____Something_we_left:         function() { return "OK" },
    OK___:                                  function() { return "OK..." },
    Cancel:                                 function() { return "Cancel" },
    Lock_:                                  function() { return "Lock!" },
    Locking_a_Crownstone:                   function() { return "Locking a Crownstone" },
  },
  LockedStateUI:{
    __filename: "../js/views/components/LockedStateUI.tsx",
    Ask_an_admin_nto_unlock_m:              function() { return "Ask an admin\nto unlock me!" },
    Unlocking___:                           function() { return "Unlocking..." },
    Done:                                   function() { return "Done" },
    Couldnt_unlock____nYou_mu:              function() { return "Couldn't unlock...\nYou must be near." },
    Press_and_hold_nto_unlock:              function() { return "Press and hold\nto unlock!" },
  },
  Login:{
    __filename: "../js/views/startupViews/Login.tsx",
    _Check_Email_Address__Ple_header:       function() { return "Check Email Address" },
    _Check_Email_Address__Ple_body:         function() { return "Please input a valid email address in the form and press the Forgot Password button again." },
    _Check_Email_Address__Ple_left:         function() { return "OK" },
    _Send_Password_Reset_Emai_header:       function() { return "Send Password Reset Email" },
    _Send_Password_Reset_Emai_body:         function() { return "Would you like us to send an email to reset your password to: " + arguments[0] + "?" },
    _Send_Password_Reset_Emai_left:         function() { return "Cancel" },
    _Send_Password_Reset_Emai_right:        function() { return "OK" },
    _Cannot_Send_Email_argume_header:       function() { return "Cannot Send Email" },
    _Cannot_Send_Email_argume_body:         function() { return arguments[0] },
    _Cannot_Send_Email_argume_left:         function() { return "OK" },
    _Your_email_address_has_n_header:       function() { return "Your email address has not been verified." },
    _Your_email_address_has_n_body:         function() { return "Please click on the link in the email that was sent to you. If you did not receive an email, press Resend Email to try again." },
    _Your_email_address_has_n_left:         function() { return "Resend Email" },
    _Your_email_address_has_n_right:        function() { return "OK" },
    arguments___arguments___O_header:       function() { return arguments[0] },
    arguments___arguments___O_body:         function() { return arguments[0] },
    arguments___arguments___O_left:         function() { return "OK" },
    _Almost_there___Please_in_header:       function() { return "Almost there!" },
    _Almost_there___Please_in_body:         function() { return "Please input your email and password." },
    _Almost_there___Please_in_left:         function() { return "OK" },
    _Your_email_address_has_no_header:      function() { return "Your email address has not been verified" },
    _Your_email_address_has_no_body:        function() { return "Please click on the link in the email that was sent to you. If you did not receive an email, press Resend Email to try again." },
    _Your_email_address_has_no_left:        function() { return "Resend Email" },
    _Your_email_address_has_no_right:       function() { return "OK" },
    _Incorrect_Email_or_Passw_header:       function() { return "Incorrect Email or Password." },
    _Incorrect_Email_or_Passw_body:         function() { return "Could not log in." },
    _Incorrect_Email_or_Passw_left:         function() { return "OK" },
    _Connection_Problem__Coul_header:       function() { return "Connection Problem" },
    _Connection_Problem__Coul_body:         function() { return "Could not connect to the Cloud. Please check your internet connection." },
    _Connection_Problem__Coul_left:         function() { return "OK" },
    _Whoops___An_error_has_oc_header:       function() { return "Whoops!" },
    _Whoops___An_error_has_oc_body:         function() { return "An error has occurred while syncing with the Cloud. Please try again later." },
    _Whoops___An_error_has_oc_left:         function() { return "OK" },
    _DEBUG__err__arguments____header:       function() { return "DEBUG: err:" },
    _DEBUG__err__arguments____body:         function() { return arguments[0] },
    _DEBUG__err__arguments____left:         function() { return "OK" },
    Logging_in___:                          function() { return "Logging in..." },
    Cannot_Send_Email:                      function() { return "Cannot Send Email" },
    Unknown_Email:                          function() { return "Unknown Email" },
    emailemail_address:                     function() { return "email" },
    password____:                           function() { return "password" },
    Getting_user_data_:                     function() { return "Getting user data." },
    Received_user_data_:                    function() { return "Received user data." },
    Handle_profile_picture_:                function() { return "Handle profile picture." },
    Syncing_with_the_Cloud_:                function() { return "Syncing with the Cloud." },
    Creating_first_Sphere_:                 function() { return "Creating first Sphere." },
    Sphere_available_:                      function() { return "Sphere available." },
    Done:                                   function() { return "Done" },
    Forgot_Password_:                       function() { return "Forgot Password?" },
    Log_In:                                 function() { return "Log In" },
    _An_email_was_sent_to_____header:       function() { return "An email was sent to " + arguments[0] + "!" },
    _An_email_was_sent_to_____body:         function() { return "Follow the instructions in the mail to verify your email address." },
    _An_email_was_sent_to_____left:         function() { return "OK" },
    _An_email_was_sent_to______header:      function() { return "An email was sent to " + arguments[0] + "!" },
    _An_email_was_sent_to______body:        function() { return "Follow the instructions in the mail to reset your password." },
    _An_email_was_sent_to______left:        function() { return "OK" },
  },
  LoginSplash:{
    __filename: "../js/views/startupViews/LoginSplash.tsx",
    Register:                               function() { return "Register" },
    Log_In:                                 function() { return "Log In" },
    Buy_Crownstones_:                       function() { return "Buy Crownstones!" },
    version__:                              function() { return "version: " + arguments[0] },
    registerButton:                         function() { return "registerButton" },
    loginButton:                            function() { return "loginButton" },
  },
  MeshElement:{
    __filename: "../js/views/components/MeshElement.tsx",
    _Update_Required__The_fir_header:       function() { return "Update Required" },
    _Update_Required__The_fir_body:         function() { return "The firmware of this Crownstone must be updated before it can show connections." },
    _Update_Required__The_fir_left:         function() { return "OK" },
  },
  MessageAdd:{
    __filename: "../js/views/messaging/MessageAdd.tsx",
    _Message_is_empty____I_ca_header:       function() { return "Message is empty.." },
    _Message_is_empty____I_ca_body:         function() { return "I can't send an empty message." },
    _Message_is_empty____I_ca_left:         function() { return "Right" },
    _No_recipients____I_cant__header:       function() { return "No recipients.." },
    _No_recipients____I_cant__body:         function() { return "I can't send a message to nobody." },
    _No_recipients____I_cant__left:         function() { return "Right" },
    IN_A_ROOM:                              function() { return "IN A ROOM" },
    ANYWHERE_IN_THE_SPHERE:                 function() { return "ANYWHERE IN THE SPHERE" },
    EVERYONE_IN_YOUR_SPHERE:                function() { return "EVERYONE IN YOUR SPHERE" },
    Everyone_in_the_Sphere:                 function() { return "Everyone in the Sphere" },
    SPECIFIC_USERS:                         function() { return "SPECIFIC USERS" },
    MESSAGE:                                function() { return "MESSAGE" },
    Your_message___:                        function() { return "Your message..." },
    __________:                             function() { return "( " + arguments[0] + " / 140 )" },
    RECIPIENTS:                             function() { return "RECIPIENTS" },
    Including_you:                          function() { return "Including you" },
    Add_recipient:                          function() { return "Add recipient" },
    LEAVE_MESSAGE_IN:                       function() { return "LEAVE MESSAGE IN" },
    Select:                                 function() { return "Select" },
    WHEN_SHOULD_IT_BE_DELIVER:              function() { return "WHEN SHOULD IT BE DELIVERED" },
    Deliver_message_on:                     function() { return "Deliver message on" },
    Entering:                               function() { return "Entering" },
    Exiting:                                function() { return "Leaving" },
    When_entering_is_selected:              function() { return "When entering is selected and the user is already there, the message will also be delivered!" },
    New_Message:                            function() { return "New Message" },
    Recipients:                             function() { return "Recipients" },
    Leave_where_:                           function() { return "Leave where?" },
  },
  MessageEntry:{
    __filename: "../js/views/messaging/MessageEntry.tsx",
    Unknown_User:                           function() { return "Unknown User" },
    You:                                    function() { return "You" },
    Everyone_in_:                           function() { return "Everyone in " + arguments[0] },
    __:                                     function() { return ", " + arguments[0] },
    _and_:                                  function() { return " and " + arguments[0] },
    Failed_to_send__tap_to_re:              function() { return "Failed to send, tap to retry." },
    Sending_message___:                     function() { return "Sending message..." },
  },
  MessageInbox:{
    __filename: "../js/views/messaging/MessageInbox.tsx",
    MESSAGES:                               function() { return "MESSAGES" },
    Messages:                               function() { return "Messages" },
    _in_:                                   function() { return " in " + arguments[0] },
    You_can_leave_messages_in:              function() { return "You can leave messages in a Sphere or room for your friends to find!" },
    Tap_the_envelope_icon_to_:              function() { return "Tap the envelope icon to create a new message!" },
    Add_some_Crownstones_to_u:              function() { return "Add some Crownstones to use messages!" },
    Add_a_Sphere_to_use_messa:              function() { return "Add a Sphere to use messages!" },
  },
  NoStones:{
    __filename: "../js/views/settingsViews/diagnostics/NoStones.tsx",
    If_the_Crownstone_has_pow:              function() { return "If the Crownstone has power, and my scanning is working fine... You can try to take the power off the Crownstone and restarting your phone." },
    If_none_of_these_work_this:             function() { return "If none of these work, this Crownstone may be broken.\n\nContact us at team@crownstone.rocks and we'll do our best to help you!" },
    The_Crownstone_needs_powe:              function() { return "The Crownstone needs power to work." },
    There_is_a_Crownstone_in_:              function() { return "There is a Crownstone in setup mode nearby!" },
    There_is_a_Crownstone_in_s:             function() { return "There is a Crownstone in setup mode nearby. However, you do not have any Spheres in which you are an admin." },
    Only_admins_can_setup_Cro:              function() { return "Only admins can setup Crownstones." },
    I_can_hear_a_Crownstone__:              function() { return "I can hear a Crownstone, but it does not seem to belong to your Sphere." },
    Are_you_visiting_a_friends:             function() { return "Are you visiting a friend's Sphere?" },
    If_you_want_to_join_a_friend:           function() { return "If you want to join a friend's Sphere, they will need to invite you." },
    Once_they_invite_you__you:              function() { return "Once they invite you, you can use their Crownstones!." },
    Please_ensure_the_Crownstone:           function() { return "Please ensure the Crownstone is powered and rerun the diagnostic if you still can't see it." },
    Are_you_near_a_Crownstone:              function() { return "Are you near a Crownstone?" },
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Searching_for_Crownstones:              function() { return "Searching for Crownstones" },
    You_re_near_a_Crownstone_but:           function() { return "You're near a Crownstone but I can't hear it. I am picking up other Bluetooth signals however. Are you sure the Crownstone has power?" },
    You_re_near_a_crownstone_:              function() { return "You're near a Crownstone and I'm not detecting any BLE signals, Crownstones or otherwise..." },
    It_could_be_that_your_phone:            function() { return "It could be that your phone's scanning has stopped.\n\nTap the button below to start the troubleshooter." },
    I_m_not_detecting_anythin:              function() { return "I'm not detecting anything and you're not near any Crownstones, everything should be OK!" },
    You_can_add_it_to_your_sphere:          function() { return "You can add it to your Sphere by going to the overview.\n\nTap the button below to go there now!" },
    Since_you_are_not_an_admin:             function() { return "Since you are not an admin in any Sphere, you cannot setup Crownstones.\n\nThis means you can't see them while they are in setup mode." },
    Im_not_picking_up_anything:             function() { return "I'm not picking up anything on my Bluetooth scan, Crownstone or otherwise." },
    Im_not_picking_up_any:                  function() { return "I'm not picking up any Crownstones, but I am receiving other Bluetooth advertisements so my scanning should be working fine." },
    if_it_does_belong_to_you:               function() { return "If it does belong to you, you can try to factory reset it.\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    You_dont_have_any_Crownst:              function() { return "You don't have any Crownstones yet..." },
  },
  NotInSphere:{
    __filename: "../js/views/settingsViews/diagnostics/NotInSphere.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Listening_for_Crownstones:              function() { return "Listening for Crownstones" },
    This_can_happen_if_there_:              function() { return "This can happen if there is a miscommunication between your phone and the app. Try restarting both to fix this problem." },
    Only_admins_can_setup_Cro:              function() { return "Only admins can setup Crownstones." },
    Once_they_invite_you__you:              function() { return "Once they invite you, you can use their Crownstones!." },
    I_can_hear_a_Crownstone__:              function() { return "I can hear a Crownstone, but it does not seem to belong to your Sphere." },
    In_that_case__everything_:              function() { return "In that case, everything seems to be working as it should be!" },
    If_you_have_any_questions:              function() { return "If you have any questions you can take a look at the Help menu, or run the diagnostic again when you're in your Sphere." },
    It_could_be_that_your_phone:            function() { return "It could be that your phone's scanning has stopped.\n\nTap the button below to start the troubleshooter." },
    So_far_so_good__n_nAre_yo:              function() { return "So far so good!\n\nAre you in a Sphere right now?" },
    I_m_not_picking_up_anythi:              function() { return "I'm not picking up anything on my Bluetooth scan, Crownstone or otherwise." },
    _close_to_your_Crownstone:              function() { return "(close to your Crownstones)" },
    This_can_happen_if_there_i:             function() { return "This can happen if there is a miscommunication between your phone and the app. Try restarting both to fix this problem.\n\n" +
                                                  "If this persists, your Crownstones may be unpowered or defective. Contact us at team@crownstone.rocks for more assistance." },
    Im_not_picking_up_any_Crow:             function() { return "I'm not picking up any Crownstones, but I am receiving other Bluetooth advertisements so my scanning should be working fine." },
    Are_you_visiting_a_friends:             function() { return "Are you visiting a friend's Sphere?" },
    If_you_want_to_join_a_frie:             function() { return "If you want to join a friend's Sphere, they will need to invite you." },
    I_can_hear_a_Crownstone__b:             function() { return "I can hear a Crownstone, but it does not seem to belong to your Sphere.\n\nSince you are not an admin in any Sphere, you cannot setup Crownstones.\n\nThis means you can't see them while they are in setup mode." },
    I_can_hear_a_Crownstone__noAdm:         function() { return "I can hear a Crownstone, but it does not seem to belong to your Sphere.\n\nIf it does belong to you, you can try to factory reset it." },
    Tap_the_button_below_to_go:             function() { return "Tap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    I_cant_hear_any_of_your_Cr:             function() { return "I can't hear any of your Crownstones, nor beacon signals from your Sphere.\n\nThere is a Crownstone in setup mode nearby. However, you do not have any Spheres in which you are an Admin." },
    You_can_add_it_to_your_Sph:             function() { return "You can add it to your Sphere by going to the overview.\n\nTap the button below to go there now!" },
    I_cant_hear_any_of_your_Cr_adm:         function() { return "I can't hear any of your Crownstones, nor beacon signals from your Sphere. But there is a Crownstone in setup mode nearby!" },
    Im_picking_up_data_from_y:              function() { return "I'm picking up data from your Crownstones, but no beacon signals from your Sphere." },
    This_can_be_bad_timing_or:              function() { return "This can be bad timing or this can happen if someone has removed a Crownstone from your Sphere without telling it to forget your Sphere.\n\n" +
                                                  "If this happens more often, you can factory reset the Crownstone that was wrongly removed.\n\n" +
                                                  "To do this, tap the button below to go to the Help menu and tap on 'I need to factory reset a Crownstone'." },
    Im_picking_up_beacon_sign:              function() { return "I'm picking up beacon signals from your Sphere, but no data from your Crownstones." },
    This_can_happen_if_someon:              function() { return "This can happen if someone has removed a Crownstone from your Sphere without telling it to forget your Sphere.\n\nYou should ask the admin of your Sphere to factory reset this Crownstone." },
    Sphere_tests_completed_:                function() { return "Sphere tests completed!" },
    Running_Sphere_tests___:                function() { return "Running Sphere tests..." },
    Initial_tests_completed_:               function() { return "Initial tests completed!" },
    Let_me_run_a_few_more_tes:              function() { return "Let me run a few more tests..." },
  },
  NumericGetSet:{
    __filename: "../../js/views/components/editComponents/NumericGetSet.tsx",
    SET_:                                   function() { return "SET " + arguments[0] },
  },
  NumericOverlay:{
    __filename: "../../js/views/overlays/NumericOverlay.tsx",
    Set_:                                   function() { return "Set!" },
  },
  NumericSet:{
    __filename: "../../js/views/components/editComponents/NumericSet.tsx",
    SET_:                                   function() { return "SET " + arguments[0] },
  },
  OptionPopup:{
    __filename: "../js/views/components/OptionPopup.tsx",
    Cancel:                                 function() { return "Cancel" },
  },
  OptionalSwitchBar:{
    __filename: "../js/views/components/editComponents/OptionalSwitchBar.tsx",
    NULL:                                   function() { return "NULL" },
  },
  OverlayUtil:{
    __filename: "../../js/views/overlays/OverlayUtil.tsx",
    Select_Room:                            function() { return "Select Room" },
  },
  PermissionIntroduction:{
    Lets_talk_Data_:                        function() { return "Let's talk Data!" },
    Crownstone_collects_locat:              function() { return "Crownstone collects location data to enable indoor localization even when the app is closed or not in use." },
    Localization_can_turn_on_:              function() { return "Localization can turn on your lights when you enter the room, even if your phone is in your pocket!\n\nWe use Crownstone's Bluetooth signals to determine where in the house you are." },
    I_understand:                           function() { return "I understand" },
    Can_we_ask_you_something_:              function() { return "Can we ask you something?" },
    We_use_notifications_switc:             function() { return "We use notifications switch your Crownstones from the cloud, like for your voice assistants!" },
    We_also_use_them_to_quick:              function() { return "We also use them to quickly update your app!" },
    Sounds_fair:                            function() { return "Sounds fair" },
    Let_me_introduce_myself_:               function() { return "Let me introduce myself!" },
    Im_your_new_smart_home__n:              function() { return "I'm your new smart home!\n\nWhat would you like to call me?" },
    Nice_to_meet_you_:                      function() { return "Nice to meet you!" },
  },
  PictureCircle:{
    __filename: "../js/views/components/PictureCircle.tsx",
    _Delete_this_picture__arg_header:       function() { return "Delete this picture?" },
    _Delete_this_picture__arg_body:         function() { return '' },
    _Delete_this_picture__arg_left:         function() { return "No" },
    _Delete_this_picture__arg_right:        function() { return "Yes" },
    Select_Picture:                         function() { return "Select Picture" },
    Take_Photo___:                          function() { return "Take Photo..." },
    Choose_from_Library___:                 function() { return "Choose from Library..." },
    Choose_which_Library___:                function() { return "Choose which Library..." },
    CANCEL:                                 function() { return "CANCEL" },
  },
  PictureView:{
    __filename: "../js/views/cameraViews/PictureView.tsx",
  },
  PlaceFloatingCrownstonesInRoom:{
    __filename: "../../js/views/roomViews/PlaceFloatingCrownstonesInRoom.tsx",
    Place_your_Crownstones_in_:             function() { return "Place your Crownstones in a room." },
    Tap_a_Crownstone_and_selec:             function() { return "Tap a Crownstone and select a room!" },
  },
  ProblemWithCrownstone:{
    __filename: "../js/views/settingsViews/diagnostics/ProblemWithCrownstone.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Is_the_problem_with_a_new:              function() { return "Is the problem with a new or an existing Crownstone?" },
    Youre_in_your_Sphere_:                  function() { return "You're in your Sphere!" },
    new:                                    function() { return "new" },
    existing:                               function() { return "existing" },
    other:                                  function() { return "other" },
  },
  ProblemWithExistingCrownstone:{
    __filename: "../js/views/settingsViews/diagnostics/ProblemWithExistingCrownstone.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Looking_for_beacon:                     function() { return "Looking for beacon" },
    Looking_for_data:                       function() { return "Looking for data" },
    Looking_for_mesh:                       function() { return "Looking for mesh" },
    Looking_for_address:                    function() { return "Looking for address" },
    Checking_mesh:                          function() { return "Checking mesh" },
    Switching_Crownstone:                   function() { return "Switching Crownstone" },
    Are_you_close_to_it_:                   function() { return "Are you close to it?" },
    It_could_just_be_out_of_r:              function() { return "It could just be out of range, could you hold your phone as close as possible?" },
    Press_the_button_to_conti:              function() { return "Press the button to continue?" },
    OK__we_can_do_it_later_:                function() { return "OK, we can do it later!" },
    Crownstone_successfully_r:              function() { return "Crownstone successfully reset!" },
    It_will_be_in_setup_mode_:              function() { return "It will be in setup mode now. You can add it to your Sphere again from the Sphere overview.\n\nTap the button below to go there now." },
    Failed_to_reset_Crownston:              function() { return "Failed to reset Crownstone..." },
    Factory_resetting_your_lo:              function() { return "Factory resetting your lost Crownstone..." },
    This_can_happen_when_some:              function() { return "This can happen when someone removed this Crownstone from your Sphere, but they did not factory reset it.\n\nWould you like me to reset it?" },
    OK__done_:                              function() { return "OK, done!" },
    Power_has_been_cycled_:                 function() { return "Power has been cycled." },
    Contact_us_at_team_crowns:              function() { return "Contact us at team@crownstone.rocks for further assistance." },
    I_can_see_this_Crownstone:              function() { return "I can see this Crownstone perfectly!" },
    I_see_what_you_mean__:                  function() { return "I see what you mean.." },
    I_can_hear_other_Crownsto:              function() { return "I can hear other Crownstones talking about this one!" },
    I_can_hear_this_Crownston:              function() { return "I can hear this Crownstone broadcasting the state of his fellow Crownstones." },
    This_is_usually_because_t:              function() { return "This is usually because the message has to go through the mesh network." },
    Something_went_wrong_:                  function() { return "Something went wrong." },
    Please_restart_the_diagno:              function() { return "Please restart the diagnostic." },
    This_Crownstone_seems_to_:              function() { return "This Crownstone seems to have a hardware error." },
    Someone_has_locked_this_C:              function() { return "Someone has locked this Crownstone." },
    A_Crownstone_can_be_locke:              function() { return "A Crownstone can be locked to prevent it from switching. You can disable the lock by going to the Device settings (tap on room, tap on Crownstone) and holding your finger on the button." },
    Someone_has_locked_this_Cr:             function() { return "Someone has locked this Crownstone." },
    Let_me_try_to_switch_this:              function() { return "Let me try to switch this Crownstone." },
    No_problem__maybe_next_ti:              function() { return "No problem, maybe next time!" },
    Checking_on____:                        function() { return "Checking on " + arguments[0] + "..." },
    I_see____It_failed_to_swi:              function() { return "I see... It failed to switch." },
    It_could_be_this_Crownsto:              function() { return "It could be this Crownstone or it could be your phone. Can you swith another Crownstone successfully?" },
    Could_you_try_restarting_:              function() { return "Could you try restarting the Crownstone?" },
    It_looks_like_I_can_switc:              function() { return "It looks like I can switch it OK, could you verify that it was switched?" },
    Did_it_switch_successfull:              function() { return "Did it switch successfully?" },
    It_could_be_that_the_conn:              function() { return "It could be that the connected device is broken.." },
    If_you_try_it_with_a_simp:              function() { return "If you try it with a simple light (which works on another outlet), did it switch successfully?" },
    Glad_it_works_now_:                     function() { return "Glad it works now!" },
    In_that_case__this_Crowns:              function() { return "In that case, this Crownstone may be broken." },
    Contact_us_at_team_crownst:             function() { return "Contact us at team@crownstone.rocks for assistance." },
    Glad_it_works_:                         function() { return "Glad it works!" },
    It_could_just_be_out_of_ra:             function() { return "It could just be out of range, could you hold your phone as close as possible?" },
    Press_the_button_to_contin:             function() { return "Press the button to continue." },
    Scroll_down_to_see_all_op:              function() { return "Scroll down to see all options." },
    Weird_how_:                             function() { return "Weird how?" },
    You_can_take_a_look_at_th:              function() { return "You can take a look at the help menu or let us know how we can help you and improve the app by sending an email at team@crownstone.rocks!" },
    This_differs_from_phone_t:              function() { return "This differs from phone to phone. Press the button to go to the BLE troubleshooter." },
    Perhaps_the_Help_menu_can:              function() { return "Perhaps the Help menu can help you further." },
    Settings:                               function() { return "Settings" },
    Sidebar_:                               function() { return "Sidebar." },
    I_cant_hear_this_Crownsto:              function() { return "I can't hear this Crownstone at all..." },
    Try_disconnecting_its_pow:              function() { return "Try disconnecting it's power, then wait 5 seconds, make sure it's powered again, wait 5 more seconds and press the button below." },
    very:                                   function() { return "very" },
    pretty:                                 function() { return "pretty" },
    somewhat:                               function() { return "somewhat" },
    not_that:                               function() { return "not that" },
    The_nearest_Crownstone_I_:              function() { return "The nearest Crownstone I can detect is " + arguments[0] + " and it's " + arguments[1] + " close!" },
    If_youre_sure_youre_near_:              function() { return "If you're sure you're near the right Crownstone, Try disconnecting it's power, then wait 5 seconds, make sure it's powered again, wait 5 more seconds and press the button below." },
    I_didnt_hear_it_via_the_o:              function() { return "I didn't hear it via the other Crownstones right now, but it is connected to the mesh. This is normal, as Crownstones take turns to broadcast eachothers's state." },
    I_didnt_hear_it_via_the_m:              function() { return "I didn't hear it via the mesh though. From where I am, I can only hear this Crownstone so it's unlikely that it's close enough to other Crownstones to form a mesh." },
    I_didnt_hear_it_via_the_me:             function() { return "I didn't hear it via the mesh though. From where I am, I can a few Crownstones but it could be too far from the other Crownstones to form a mesh." },
    I_didnt_hear_it_via_the_mes:            function() { return "I didn't hear it via the mesh right now.. This could be just a momentary issue as Crownstones take turns to broadcast eachothers's state." },
    I_didnt_hear_it_via_the_mesh:           function() { return "I didn't hear it via the mesh though. From where I am, I can only hear this Crownstone so it's unlikely that it's close enough to other Crownstones to form a mesh." },
    I_didnt_hear_it_via_the_mesh_:          function() { return "I didn't hear it via the mesh though. From where I am, I can a few Crownstones but it could be too far from the other Crownstones to form a mesh." },
    I_cant_hear_it_via_the_me:              function() { return "I can't hear it via the mesh but it was in the network. From where I am, I can only hear this Crownstone so maybe it's not close enough enough to other Crownstones to form a mesh?\n\n" },
    I_cant_hear_it_via_the_mes:             function() { return "I can't hear it via the mesh nor is it currently in one. From where I am, I can only hear this Crownstone so it's unlikely that it's close enough to other Crownstones to form a mesh.\n\n" },
    I_cant_hear_it_via_the_mesh:            function() { return "I can't hear it via the mesh nor is it currently in one. From where I am, I can a few Crownstones but it could be too far from the other Crownstones to form a mesh.\n\n" },
    You_can_try_moving_it_clo:              function() { return "You can try moving it closer or adding more Crownstones to your network. You can use the Mesh Topology view to see how well the mesh is connected. It's in the " },
    Settings_:                              function() { return "Settings." },
    It_is_in_the_mesh__You_ca:              function() { return "It is in the mesh. You can take a look at the network in the Mesh Topology view which you can find in the " },
    It_is_in_the_mesh__You_can:             function() { return "It is in the mesh. You can take a look at the network in the Mesh Topology view which you can find in the " },
    Alternatively_you_can_sen:              function() { return "Alternatively you can send us an email at team@crownstone.rocks and we'll do our best to help you!" },
    Sometimes_the_background_:              function() { return "Sometimes the background processes don't work the way they should." },
    Its_very_possible_that_so:              function() { return "It's very possible that some of the behaviour has not been comminucated clearly :)." },
    I_think_it_should_react_d:              function() { return "I think it should react differently based on how I configured it." },
    It_switches_unexpectedly_:              function() { return "It switches unexpectedly." },
    It_does_not_work_if_the_a:              function() { return "It does not work if the app is not open" },
    Other___:                               function() { return "Other..." },
    The_app_says_Searching___:              function() { return "The app says 'Searching...'." },
    I_cant_get_it_to_switch_:               function() { return "I can't get it to switch." },
    It_is_not_in_the_mesh_:                 function() { return "It is not in the mesh." },
    It_only_switches_when_Im_:              function() { return "It only switches when I'm nearby." },
    Its_behaviour_is_weird_:                function() { return "It's behaviour is weird." },
    Whats_wrong_with__:                     function() { return "What's wrong with " + arguments[0] + "?" },
    You_can_ask_an_Admin_to_d:              function() { return "You can ask an Admin to disable Switchcraft for this Crownstone." },
    The_option_for_Switchcraf:              function() { return "You can enable or disable the Switchcraft ability in the Crownstone menu. Navigate to the room, tap on the Crownstone and tap on Abilities in the left corner." },
    I_cant_hear_this_Crownsto2:             function() { return "I can't hear this Crownstone.." },
    If_theres_anything_else__:              function() { return "If there's anything else, please run the diagnostics again!" },
    In_that_case__its_probabl:              function() { return "In that case, it's probably your phone's Bluetooth. Tap the button below to resolve this!" },
    Could_you_try_moving_a_li:              function() { return "Could you try moving a little closer? Tap the button once you're a bit closer to this Crownstone." },
    I_couldnt_hear_any_messag:              function() { return "I couldn't hear any messages from that Crownstone, but I could before.." },
    Trying_to_switch____:                   function() { return "Trying to switch " + arguments[0] + "..." },
    Rerun_the_diagnostic_once:              function() { return "Rerun the diagnostic once you're ready to let me try to switch this Crownstone." },
    Is_that_OK__Its_currently:              function() { return "Is that OK? It's currently " + (arguments[0] ? "on" : "off") + "and I'd like to turn it " + (arguments[0] ? 'off' : 'on') + "."},
    A_Crownstone_can_be_locke_noAdm:        function() { return "A Crownstone can be locked to prevent it from switching. You'll need to ask an Admin in your Sphere to unlock it for you." },
    This_does_not_mean_your_d:              function() { return "This does not mean your device is broken. Tap on it's room and tap on the Crownstone. It will guide to to fixing the hardware error." },
    A_Crownstone_does_not_swi:              function() { return "A Crownstone does not switch back to 'Searching...' directly when you're out of range.\n\n" +
      "It could be that the app thinks the Crownstone is still in range while you're already too far away.\n\n" +
      "If a Crownstone is in range of another, they form a mesh network. This can help you to relay a command from a Crownstone in your range to another." },
    Youre_probably_out_of_ran:              function() { return "You're probably out of range when that happens." },
    It_can_happen_that_messag:              function() { return "It can happen that messages over the mesh network are lost if there is only one path between Crownstones." +
      "\n\nWe're working to improve this!" +
      "\n\nAlternatively, a Crownstone does not switch back to 'Searching...' directly when you're out of range. It could be that the app thinks the Crownstone is still in range while you're already too far away." },
    You_can_try_to_take_the_p:              function() { return "You can try to take the power off this Crownstone for a little while and see if it's fixed.\n\nIf this keeps happening, contact us at team@crownstone.rocks."},
    I_can_hear_this_Crownston2:             function() { return "I can hear this Crownstone beacon signal but not it's data." },
    It_is_not_on_Searching___:              function() { return "It is not on 'Searching...' now." },
    I_can_hear_the_Crownstone:              function() { return "I can hear the Crownstone's data but not it's beacon signal." },
    Since_I_cant_hear_this_Cr:              function() { return "Since I can't hear this Crownstone directly from where I am, some commands will go through the mesh and won't always be delivered. We're working to improve that!" },
    I_can_hear_the_Crown_mesh:              function() { return "I can hear the Crownstone via the mesh, it should not be 'Seaching...' anymore." },
    I_can_hear_the_directly:                function() { return "I can hear the Crownstone directly, it should not be 'Seaching...' anymore." },
    I_still_cant_hear_this_Cr:              function() { return "I still can't hear this Crownstone at all." },
    I_cant_hear_this_Crowns_atAll:          function() { return "I can't hear this Crownstone at all..." },
    If_youre_sure_its_one_of_:              function() { return "If you're sure it's one of your Crownstones, you can try to factory reset it!\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    The_nearest_Crownstone_is:              function() { return "The nearest Crownstone is not registered to your Sphere, and it's " + arguments[0] + " close!" },
    This_can_happen_when_some_noAdm:        function() { return "This can happen when someone removed this Crownstone from your Sphere, but they did not factory reset it.\n\nYou will have to ask an admin to reset it for you." },
    The_nearest_Crownstone_be:              function() { return "The nearest Crownstone belongs to your Sphere but it has been removed from your database.\n\nIt's " + arguments[0] + " close by." },
    Something_went_wrong_duri:              function() { return "Something went wrong during the recover process.. You can try to factory reset it yourself!\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    Run_the_diagnostic_again_:              function() { return "Run the diagnostic again when you're ready or factory reset the Crownstone yourself.\n\nGo to help in the " + arguments[0] + " and tap on 'I need to factory reset a Crownstone'." },
    You_can_try_to_factory_re:              function() { return "You can try to factory reset it.\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    I_can_hear_a_Crownstone_w:              function() { return "I can hear a Crownstone with the same address as the one we're looking for, but it does not seem to belong to your Sphere." },
    Im_near_now_:                           function() { return "I'm near now!" },
    Problem_with_existing_Cro:              function() { return "Problem with existing Crownstone..." },
  },
  ProblemWithLocalization:{
    __filename: "../js/views/settingsViews/diagnostics/ProblemWithLocalization.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Checking_for_Beacons:                   function() { return "Checking for Beacons" },
    Indoor_localization_is_ru:              function() { return "Indoor localization is running!" },
    You_can_see_your_face_on_:              function() { return "You can see your face on the room bubbles showing where the app thinks you are!" },
    There_are_not_enough_Crow:              function() { return "There are not enough Crownstones in range at the moment to do the indoor localization. We need at least 3." },
    Since_the_radio_field_is_:              function() { return "Since the radio field is radially symmetric, we require at least 3 Crownstones in range to determine where you are." },
    Indoor_localization_is_di:              function() { return "Indoor localization is disabled by you." },
    You_need_to_train_the_roo:              function() { return "You need to train the rooms before the localization can run." },
    You_can_do_this_by_tappin:              function() { return "You can do this by tapping on the location icon in the top right corner of the room and following the instructions." },
    Room_level_localization_i:              function() { return "Room level localization is only available if you have 4 or more Crownstones in your Sphere." },
    This_is_required_to_be_ab:              function() { return "This is required to be able to pinpoint you in a room. The more Crownstones you have, the better the localization will be!" },
    Indoor_localization_is_dis:             function() { return "Indoor localization is disabled by you." },
    When_indoor_localization_:              function() { return "When indoor localization at room-level is available, we do not use near/further away." },
    You_will_need_to_train_th:              function() { return "You will need to train the distance of what exactly is near. This differs from phone to phone so everyone using this will have to train it." },
    Tap_on_the_room__tap_on_t:              function() { return "Tap on the room, tap on the Crownstone icon, navigate to the right and tap edit on the Behaviour menu. You can train the distance there." },
    Near_further_away_behavio:              function() { return "Near/further away behaviour has not been configured by you." },
    Near_further_away_is_conf:              function() { return "Near/further away is configured correctly on this Crownstone." },
    Tap_to_toggle_is_disabled:              function() { return "Tap-to-toggle is disabled." },
    Tap_to_toggle_is_not_conf:              function() { return "Tap-to-toggle is not configured yet!" },
    Tap_to_toggle_is_configur:              function() { return "Tap-to-toggle is configured correctly on this Crownstone." },
    Tap_to_toggle_is_disabled_:             function() { return "Tap-to-toggle is disabled on this Crownstone." },
    You_can_enable_it_by_tapp:              function() { return "You can enable it by tapping on the room, tapping on the Crownstone icon, tapping edit in the top right corner and enabling it there." },
    Tap_to_toggle_is_disabled_o:            function() { return "Tap-to-toggle is disabled on this Crownstone." },
    You_will_have_to_ask_an_a:              function() { return "You will have to ask an admin in your Sphere to enable this." },
    Press_the_button_to_conti:              function() { return "Press the button to continue, or close the diagnostic menu." },
    Continue:                               function() { return "Continue" },
    This_is_currently_unavoid:              function() { return "This is currently unavoidable for the room events. However, the Sphere Exit event does work with multiple users." },
    We_are_working_on_new_beh:              function() { return "We are working on new behaviour that will combine the schedules and the behaviour to facilitate this!" },
    Only_turn_on_when_dark_wi:              function() { return "Only turn on when dark will only suppress the action the moment you enter a room or enter your Sphere." },
    Scroll_down_to_see_all_op:              function() { return "Scroll down to see all options." },
    Perhaps_the_Help_menu_can:              function() { return "Perhaps the Help menu can help you further." },
    Make_sure_the_Crownstones:              function() { return "Make sure the Crownstones are spread around the space evenly! If they're all side by side, it's very difficult to pinpoint you.\n\n" + "Alternatively you can try to retrain your rooms. You can do this by tapping on a room bubble in the overview, then tapping on the button in the top right corner.\n\n" + "Finally, we're working on brand new algorithms that will make this much more reliable! You'll get these as a free update when they're available!" },
    You_have_a_good_amount_of:              function() { return "You have a good amount of Crownstones! If you have a large area to cover, you'll need more Crownstones as well." },
    The_more_Crownstones_you_:              function() { return "The more Crownstones you have, the better the indoor localization will be." },
    Make_sure_the_Crownstones_:             function() { return "Make sure the Crownstones are spread around the space evenly! If they're all side by side, it's very difficult to pinpoint you.\n\n" + "Alternatively you can try to retrain your rooms. You can do this by tapping on a room bubble in the overview, then tapping on the button in the top right corner.\n\n" + "Finally, we're working on brand new algorithms that will make this much more reliable! You'll get these as a free update when they're available!" },
    Alternatively_you_can_sen:              function() { return "Alternatively you can send us an email at team@crownstone.rocks and we'll do our best to help you!" },
    Whats_wrong_with_the_Loca:              function() { return "What's wrong with the Localization?" },
    It_does_not_do_room_level:              function() { return "It does not do room-level localization." },
    Room_level_localization_is:             function() { return "Room-level localization is inaccurate." },
    Near_far_does_not_work_:                function() { return "Near/far does not work." },
    Tap_to_toggle_does_not_wo:              function() { return "Tap-to-toggle does not work." },
    Things_turn_off_while_Im_:              function() { return "Things turn off while I'm still there." },
    If_I_leave_the_room_but_s:              function() { return "If I leave the room but someone is still there, Crownstones still turn off." },
    Only_on_when_dark_does_no:              function() { return "'Only on when dark' does not turn on." },
    Other___:                               function() { return "Other..." },
    It_will_not_turn_on_at_a_:              function() { return "It will not turn on at a later time if you don't re-enter your room or Sphere.\n\nWe are working on new behaviour that will combine the schedules and the behaviour to facilitate this!" },
    I_cant_help_you_with_this:              function() { return "I can't help you with this." },
    Tap_to_toggle_does_not_wo2:             function() { return "Tap-to-toggle does not work on a device that can't toggle anything." },
    We_dont_generally_recomme:              function() { return "We don't generally recommend using tap-to-toggle on built-ins. Calibrating tap-to-toggle for built-ins can cause issues with tap-to-toggle on plugs." },
    If_its_not_working_as_you:              function() { return "If it's not working as you'd like, try recalibrating the distance.\n\nYou can do this in the in the " + (arguments[0] ? "Sidebar" : "settings menu") + " by tapping on 'Calibrate Tap-to-Toggle'."},
    You_can_enable_this_in_th:              function() { return "You can enable this in the in the " + (arguments[0] ? "Sidebar" : "settings menu") + " by tapping on 'Calibrate Tap-to-Toggle'."},
    You_can_enable_this_in_th2:             function() { return "You can enable this in the 'App Settings' which you can find in the" + (arguments[0] ? "Sidebar" : "settings menu") + "." },
    You_can_retrain_where_you:              function() { return "You can retrain where you want 'near' to be by editing the behaviour.\n\nTap on the room, tap on the Crownstone icon, navigate to the right and tap edit on the Behaviour menu. You can train the distance there.\n\nKeep in mind, since human beings are essentially big sacks of water, if you sit between your phone and the Crownstone it will think it's further away than it really is!" },
    Tap_on_the_room__tap_on_t2:             function() { return "Tap on the room, tap on the Crownstone icon, navigate to the right and tap edit on the Behaviour menu. Tell me what you'd like me to do when you get near and move further away and train the distance." },
    This_is_a_design_choice__:              function() { return "This is a design choice, not a bug. We're working on smarter behaviour though, which will allow you to incorporate near/further away together with room-level localization." },
    Not_all_rooms_in_the_app_:              function() { return "Not all rooms in the app require Crownstones inside of them.\n\nAs long as you pick up a signal from at least 3 Crownstones in a room, it can be used for localization. Even if the Crownstones that send the signals are in other rooms." },
    You_need_to_have_at_least:              function() { return "You need to have at least 4 Crownstones placed in rooms. Take the ones that are 'Floating' and assign a room to them!" },
    __Apart_from_the_amount__:              function() { return "\n\nApart from the number, the spread of Crownstones is important too!" },
    Even_thought_you_have_a_g:              function() { return "Even though you have a good number of Crownstones, if you have a large area to cover, you'll need more Crownstones as well.\n\nWhere you are right now, I can't see at least 3 Crownstones to do the indoor localization." },
    The_more_Crownstones_you_expl:          function() { return "The more Crownstones you have, the better the indoor localization will be. If you have a large area to cover, you'll need more Crownstones as well.\n\nWhere you are right now, I can't see at least 3 Crownstones to do the indoor localization." },
    Problem_with_localization:              function() { return "Problem with localization..." },
  },
  ProblemWithNewCrownstone:{
    __filename: "../js/views/settingsViews/diagnostics/ProblemWithNewCrownstone.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Checking_nearest_Crownsto:              function() { return "Checking nearest Crownstone" },
    Looking_for_setup_Crownst:              function() { return "Looking for setup Crownstones" },
    In_order_to_check_what_ma:              function() { return "In order to check what may the the problem, your phone should be nearly touching this Crownstone and it should be powered on." },
    Press_the_button_below_on:              function() { return "Press the button below once everything is ready." },
    Ready_to_Test_:                         function() { return "Ready to Test!" },
    The_nearest_Crownstone_is:              function() { return "The nearest Crownstone is in setup mode!" },
    The_nearest_Crownstone_is_:             function() { return "The nearest Crownstone is in setup mode! However, you do not have any Spheres in which you are an admin." },
    Only_admins_can_setup_Cro:              function() { return "Only admins can setup Crownstones." },
    There_is_a_Crownstone_in_:              function() { return "There is a Crownstone in setup mode nearby!" },
    There_is_a_Crownstone_in_s:             function() { return "There is a Crownstone in setup mode nearby! However, you do not have any Spheres in which you are an admin." },
    Only_admins_can_setup_Crow:             function() { return "Only admins can setup Crownstones." },
    I_can_hear_a_Crownstone_n:              function() { return "I can hear a Crownstone near, but it does not seem to belong to your Sphere." },
    I_can_hear_a_Crownstone_ne:             function() { return "I can hear a Crownstone near , but it does not seem to belong to your Sphere." },
    _in_:                                   function() { return " in '" + arguments[0] + "'" },
    Since_you_are_not_an_admi:              function() { return "Since you are not an admin in any Sphere, you cannot setup Crownstones.\n\nThis means you can't see them while they are in setup mode." },
    If_it_does_belong_to_you_:              function() { return "If it does belong to you, you can try to factory reset it.\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    Please_ensure_that_the_Cr:              function() { return "Please ensure that the Crownstone you're near is in fact a new one." },
    The_nearest_stone_I_can_f:              function() { return "The nearest stone I can find is " + arguments[0]},
    You_can_add_it_to_your_Sp:              function() { return "You can add it to your Sphere by going to the overview.\n\nTap the button below to go there now!" },
    Problem_with_new_Crownsto:              function() { return "Problem with new Crownstone..." },
    Let_me_run_a_few_more_tes:              function() { return "Let me run a few more tests..." },
  },
  ProblemWithOtherCrownstone:{
    __filename: "../js/views/settingsViews/diagnostics/ProblemWithOtherCrownstone.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Scanning_for_nearby_Crown:              function() { return "Scanning for nearby Crownstones" },
    If_you_think_this_is_the_:              function() { return "If you think this is the case here, go close to the Crownstone that has disappeared and press the button below." },
    Checking_for_nearby_Crown:              function() { return "Checking for nearby Crownstones..." },
    Crownstone_successfully_r:              function() { return "Crownstone successfully reset!" },
    It_will_be_in_setup_mode_:              function() { return "It will be in setup mode now. You can add it to your Sphere again from the Sphere overview.\n\nTap the button below to go there now." },
    Failed_to_reset_Crownston:              function() { return "Failed to reset Crownstone..." },
    Factory_resetting_your_lo:              function() { return "Factory resetting your lost Crownstone..." },
    This_can_happen_when_some:              function() { return "This can happen when someone removed this Crownstone from your Sphere, but they did not factory reset it.\n\nWould you like me to reset it?" },
    Something_went_wrong___:                function() { return "Something went wrong..." },
    Please_restart_the_diagno:              function() { return "Please restart the diagnostic and try again." },
    very:                                   function() { return "very" },
    pretty:                                 function() { return "pretty" },
    somewhat:                               function() { return "somewhat" },
    not_that:                               function() { return "not that" },
    If_this_is_not_the_one_yo:              function() { return "If this is not the one you were looking for, then take the power off it for a while and restart the diagnostic.\n\nIf this keeps happening, contact us at team@crownstone.rocks and we'll do our best to help!" },
    The_nearest_Crownstone_I_:              function() { return "The nearest Crownstone I can detect is " + arguments[0] + " and it's " + arguments[1] + " close!"},
    If_youre_sure_its_one_of_:              function() { return "If you're sure it's one of your Crownstones, you can try to factory reset it!\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    The_nearest_Crownstone_is:              function() { return "The nearest Crownstone is not registered to your Sphere, and it's " + arguments[0] + " close!"},
    This_can_happen_when_some_noAdm:        function() { return "This can happen when someone removed this Crownstone from your Sphere, but they did not factory reset it.\n\nYou will have to ask an admin to reset it for you." },
    The_nearest_Crownstone_be:              function() { return "The nearest Crownstone belongs to your Sphere but it has been removed from your database.\n\nIt's " + arguments[0] + " close by." },
    Something_went_wrong_duri:              function() { return "Something went wrong during the recover process.. You can try to factory reset it yourself!\n\nTap the button below to go to help and tap on 'I need to factory reset a Crownstone'." },
    If_this_keeps_happening__:              function() { return "If this keeps happening, contact us at team@crownstone.rocks and we'll do our best to help!" },
    I_cant_detect_any_Crownst:              function() { return "I can't detect any Crownstone nearby... You can try to take the power off it for a while and restart the diagnostic." },
    It_can_sometimes_happen_t:              function() { return "It can sometimes happen that a Crownstone that used to be in your Sphere is gone.\n\nThis does not mean it is 'Searching...' in the app. If that is what you're looking for, restart the diagnostics and select 'existing'." },
    Problem_with_missing_Crow:              function() { return "Problem with missing Crownstone..." },
  },
  Register:{
    __filename: "../js/views/startupViews/Register.tsx",
    _Registration_Error_argum_header:       function() { return "Registration Error" },
    _Registration_Error_argum_body:         function() { return arguments[0] },
    _Registration_Error_argum_left:         function() { return "OK" },
    Password:                               function() { return "Password" },
    By_registering__you_agree:              function() { return "By registering, you agree to our " },
    terms_:                                 function() { return "terms" },
    __:                                     function() { return " & " },
    privacy_policy:                         function() { return "privacy policy" },
    First_name:                             function() { return "First name" },
    Last_name:                              function() { return "Last name" },
    Email_address:                          function() { return "Email address" },
    _What_should_I_call_you___header:       function() { return "What should I call you?" },
    _What_should_I_call_you___body:         function() { return "I'd really like to know your name!" },
    _What_should_I_call_you___left:         function() { return "Fine..." },
    _How_should_I_adress_you__header:       function() { return "How should I adress you?" },
    _How_should_I_adress_you__body:         function() { return "Could you tell me your first name?" },
    _How_should_I_adress_you__left:         function() { return "Fine..." },
    _How_can_I_reach_you___Id_header:       function() { return "How can I reach you?" },
    _How_can_I_reach_you___Id_body:         function() { return "I'd really like to know your email address!" },
    _How_can_I_reach_you___Id_left:         function() { return "OK" },
    _I_dont_understand_____Th_header:       function() { return "I don't understand..." },
    _I_dont_understand_____Th_body:         function() { return "That does not seem to be a valid email address!" },
    _I_dont_understand_____Th_left:         function() { return "I'll fix it!" },
    _I_want_to_be_secure______header:       function() { return "I want to be secure..." },
    _I_want_to_be_secure______body:         function() { return "Please set a password for your account!" },
    _I_want_to_be_secure______left:         function() { return "OK" },
    Thats_me_:                              function() { return "That's me!" },
    You_bet_I_do_Not_just_yet:              function() { return arguments[0] ? "You bet I do!" : "Not just yet..." },
    Im_ready_:                              function() { return "I'm ready!" },
    Ill_validate_my_account_a:              function() { return "I'll validate my account and log in!" },
    Welcome_:                               function() { return "Welcome!" },
    What_should_I_call_you_:                function() { return "What should I call you?" },
    Nice_to_meet_you__:                     function() { return "Nice to meet you " + arguments[0] + "!" },
    Would_you_like_to_add_a_p:              function() { return "Would you like to add a profile picture?" },
    Fantastic_picture_:                     function() { return "Fantastic picture!" },
    Youre_almost_done_:                     function() { return "You're almost done!" },
    Now_lets_create_your_acco:              function() { return "Now let's create your account!" },
    Lets_create_your_account_:              function() { return "Let's create your account!" },
    Thats_it_:                              function() { return "That's it!" },
    We_have_sent_an_email_to__:             function() { return "We have sent an email to:\n\n" + arguments[0] + "\n\n" + "Please tap the link in the email to activate your account and log in!" },
    If_you_do_not_see_the_ema:              function() { return "If you do not see the email, try checking your spam folder." },
    Sending_Registration_Requ:              function() { return "Sending Registration Request..." },
  },
  ReviewInitialTests:{
    __filename: "../js/views/settingsViews/diagnostics/ReviewInitialTests.tsx",
    Problem_in_database__:                  function() { return "Problem in database.." },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_disabled___:                function() { return "Scanning is disabled..." },
    Receiving_Sphere_beacons:               function() { return "Receiving Sphere beacons" },
    Receiving_Crownstone_data:              function() { return "Receiving Crownstone data" },
    Problems_found__:                       function() { return "Problems found.." },
    To_fix_this_well_have_to_:              function() { return "To fix this we'll have to fully re-sync with the Cloud. Press the button below to fix this!" },
    Restore_database:                       function() { return "Restore database" },
    Your_phone_is_currently_n:              function() { return "Your phone is currently not scanning for the beacon signals sent by the Crownstones.\n\n" + "To fix this, make sure the Bluetooth is on, the permission for Location Services is set to \"always\" and try to restart the app.\n\n" + "Press the button below to fully quit the app." },
    Quit_app_now:                           function() { return "Quit app now" },
    Running_initial_tests___:               function() { return "Running initial tests..." },
  },
  RoomAdd:{
    __filename: "../js/views/roomViews/RoomAdd.tsx",
  },
  RoomAddCore:{
    __filename: "../../js/views/roomViews/RoomAddCore.tsx",
    _Max_amount_of_rooms_reac_header:       function() { return "Max amount of rooms reached.." },
    _Max_amount_of_rooms_reac_body:         function() { return "You will have to delete some before you can make a new one." },
    _Max_amount_of_rooms_reac_left:         function() { return "OK" },
    Lets_make_a_room_:                      function() { return "Let's make a room!" },
    What_would_you_like_to_ca:              function() { return "What would you like to call this room?" },
    My_new_room:                            function() { return "My new room" },
    Next:                                   function() { return "Next" },
    Good_choice_:                           function() { return "Good choice!" },
    Room_name_must_be_at_least:             function() { return "Room name must be at least 1 character long." },
    Please_change_the_name_an:              function() { return "Please change the name and try again." },
    This_room_already_exists_:              function() { return "This room already exists." },
    Please_pick_a_unique_name:              function() { return "Please pick a unique name for this room." },
    Lets_pick_an_icon_:                     function() { return "Let's pick an icon!" },
    You_can_give_your_room_an:              function() { return "You can give your room an icon and optionally a background picture!" },
    You_can_always_change_thi:              function() { return "You can always change this later in the room's settings." },
    Create_room:                            function() { return "Create room" },
  },
  RoomBanner:{
    __filename: "../js/views/components/RoomBanner.tsx",
    Not_in_Sphere:                          function() { return "Not in Sphere" },
    Nobody_Present:                         function() { return "Nobody Present" },
    No_Crownstones_in_this_ro:              function() { return "Empty room!" },
    _Crownstone:                            function() { return arguments[0] + " Crownstone" },
    _Crownstones:                           function() { return arguments[0] + " Crownstones" },
    _W:                                     function() { return arguments[0] + " W" },
  },
  RoomCircle:{
    __filename: "../js/views/components/RoomCircle.tsx",
    _W:                                     function() { return arguments[0] + " W" },
  },
  RoomDeleted:{
    __filename: "../js/views/static/RoomDeleted.tsx",
    Room_Deleted_:                          function() { return "Room Deleted." },
    Deleted:                                function() { return "Deleted" },
    Back_to_Sphere_:                        function() { return "Back to Sphere!" },
  },
  RoomEdit:{
    __filename: "../js/views/roomViews/RoomEdit.tsx",
    _Encountered_Cloud_Issue__header:       function() { return "Encountered Cloud Issue." },
    _Encountered_Cloud_Issue__body:         function() { return "We cannot delete this Room in the Cloud. Please try again later." },
    _Encountered_Cloud_Issue__left:         function() { return "OK" },
    _Retrain_Room__Only_do_th_header:       function() { return "Retrain Room" },
    _Retrain_Room__Only_do_th_body:         function() { return "Only do this if you experience issues with the indoor localization." },
    _Retrain_Room__Only_do_th_left:         function() { return "Cancel" },
    _Retrain_Room__Only_do_th_right:        function() { return "OK" },
    _Are_you_sure___Removing__header:       function() { return "Are you sure?" },
    _Are_you_sure___Removing__body:         function() { return "Removing this Room will make all contained Crownstones floating." },
    _Are_you_sure___Removing__left:         function() { return "Cancel" },
    _Are_you_sure___Removing__right:        function() { return "Remove" },
    ROOM_SETTINGS:                          function() { return "ROOM SETTINGS" },
    Room_Name:                              function() { return "Room Name" },
    Icon:                                   function() { return "Icon" },
    Picture:                                function() { return "Picture" },
    INDOOR_LOCALIZATION:                    function() { return "INDOOR LOCALIZATION" },
    Optional:                               function() { return "Optional" },
    Retrain_Room:                           function() { return "Retrain Room" },
    Removing_this_room_in_the:              function() { return "Removing this room in the Cloud..." },
    If_the_indoor_localizatio:              function() { return "If the indoor localization seems off or when you have moved Crownstones around, " + "you can retrain this room so " + arguments[0] + " can find you again!" },
    Teach__to_find_you_:                    function() { return "Teach " + arguments[0] + " to find you!" },
    Teach__to_identify_when_y:              function() { return "Teach " + arguments[0] + " to identify when you\'re in this room by walking around in it." },
    You_can_only_train_this_r:              function() { return "You can only train this room if you are in this Sphere." },
    Indoor_localization_on_ro:              function() { return "Indoor localization on room-level is only possible when you have 4 or more Crownstones registered and placed in rooms." },
    Enable_indoor_localizatio:              function() { return "Enable indoor localization in the app settings to be able to train this room." },
    Remove_Room:                            function() { return "Remove Room" },
    Removing_this_Room_will_m:              function() { return "Removing this Room will make all contained Crownstones floating." },
    Edit_Room:                              function() { return "Edit Room" },
  },
  RoomExplanation:{
    __filename: "../js/views/components/RoomExplanation.tsx",
    Train_Room:                             function() { return "Tap here to teach me where this room is!" },
    No_Crownstones_in_this_ro:              function() { return "No Crownstones in this room." },
  },
  RoomIconSelection:{
    __filename: "../js/views/roomViews/RoomIconSelection.tsx",
    Hallway:                                function() { return "Hallway" },
    Living_Room:                            function() { return "Living Room" },
    Kitchen:                                function() { return "Kitchen" },
    Bathroom:                               function() { return "Bathroom" },
    Office:                                 function() { return "Office" },
    Bedroom:                                function() { return "Bedroom" },
    Furniture:                              function() { return "Furniture" },
    Garage:                                 function() { return "Garage" },
    Play_Room:                              function() { return "Play Room" },
    Music_Room:                             function() { return "Music Room" },
    Nature___Outside:                       function() { return "Nature / Outside" },
    Miscellaneous:                          function() { return "Miscellaneous" },
    Pick_an_Icon:                           function() { return "Pick an Icon" },
  },
  RoomList:{
    __filename: "../js/views/components/RoomList.tsx",
    Number_of_Crownstones__:                function() { return "Number of Crownstones: " + arguments[0] },
  },
  RoomOverview:{
    __filename: "../js/views/roomViews/RoomOverview.tsx",
    _Youre_not_in_the_Sphere__header:       function() { return "You're not in the Sphere" },
    _Youre_not_in_the_Sphere__body:         function() { return "Training is only possible if you're in the Sphere. Try again when you are." },
    _Youre_not_in_the_Sphere__left:         function() { return "OK" },
    _Retrain_Room__Only_do_th_header:       function() { return "Retrain Room" },
    _Retrain_Room__Only_do_th_body:         function() { return "Only do this if you experience issues with the indoor localization." },
    _Retrain_Room__Only_do_th_left:         function() { return "Cancel" },
    _Retrain_Room__Only_do_th_right:        function() { return "OK" },
    _Indoor_localization_is_c_header:       function() { return "Indoor localization is currently disabeld" },
    _Indoor_localization_is_c_body:         function() { return "Take a look at the app settings if you'd like to change this." },
    _Indoor_localization_is_c_left:         function() { return "OK" },
    No_Crownstones_in_reach__:              function() { return "No Crownstones in reach..." },
    Tap_Crownstone_icon_to_go:              function() { return "Tap Crownstone icon to go back to normal view." },
    No_dimmable_Crownstones_i:              function() { return "No dimmable Crownstones in room..." },
  },
  RoomTraining:{
    __filename: "../js/views/roomViews/RoomTraining.tsx",
    _No_Crownstones_in_range__header:       function() { return "No Crownstones in range..." },
    _No_Crownstones_in_range__body:         function() { return "To be able to identify this room, I need to see at least 3 Crownstones, but I can't see any from here... Try to reposition your Crownstones so I can see more of them." },
    _No_Crownstones_in_range__left:         function() { return "OK" },
    _I_can_not_see_enough_Cro_header:       function() { return "I can not see enough Crownstones..." },
    _I_can_not_see_enough_Cro_body:         function() { return "To be able to identify this room, I need to see at least 3 Crownstones but I see only " + arguments[0] + "." + " Try to reposition your Crownstones so I can see more of them." },
    _I_can_not_see_enough_Cro_left:         function() { return "OK" },
    _Do_you_want_to_cancel_tr_header:       function() { return "Do you want to cancel training?" },
    _Do_you_want_to_cancel_tr_body:         function() { return "Cancelling this process will revert it to the way it was before." },
    _Do_you_want_to_cancel_tr_left:         function() { return "No" },
    _Do_you_want_to_cancel_tr_right:        function() { return "Yes" },
    All_Done_:                              function() { return "All Done!" },
    Teaching_:                              function() { return "Teaching " + arguments[0] },
  },
  RoomTraining_explanation:{
    __filename: "../js/views/roomViews/trainingComponents/RoomTraining_explanation.tsx",
    OK__so_its_a__room__Lets_:              function() { return "OK, so it's a " + arguments[0] + " room. Let's start training " + arguments[1] + "!" },
    Walk_around_the_room_with:              function() { return "Walk around the room with your phone in your hand. " + "Try to get to every spot in the room, near the walls as well and through the center. " + "The teaching process takes " + arguments[0] + " seconds and you can see the progress on your screen." },
    Press_the_button_below_to:              function() { return "Press the button below to get started!" },
  },
  RoomTraining_finished:{
    __filename: "../js/views/roomViews/trainingComponents/RoomTraining_finished.tsx",
    Finished_learning_about_t:              function() { return "Finished learning about this room!" },
    Once_you_have_taught__all:              function() { return "Once you have taught me all the rooms, I will start doing my best to determine in which room you are!\n\nPress the button below to go back!" },
  },
  RoomTraining_roomSize:{
    __filename: "../js/views/roomViews/RoomTraining_roomSize.tsx",
    To_let__find_you_in___we_:              function() { return "To let me find you in " + arguments[0] + ", you need to help me a little!" },
    How_large_is_this_room_:                function() { return "How large is this room?" },
    Large_rooms_take_a_bit_mo:              function() { return "Large rooms take a bit more time to learn about than small rooms." },
    Teaching_:                              function() { return "Teaching " + arguments[0] },
  },
  RoomTraining_training:{
    __filename: "../js/views/roomViews/trainingComponents/RoomTraining_training.tsx",
    Walk_around_the_room_so__:              function() { return "Walk around the room so I can learn to locate you within it. Each beat I learn a bit more about the room!" },
  },
  RuleEditor:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/supportComponents/BehaviourRuleEditor.tsx",
    What_should_I_be_:                      function() { return "What should I be?" },
    My_behaviour_defines_when:              function() { return "My behaviour defines when I should be on. I will be off when I should not be on." },
    Sounds_about_right_:                    function() { return "Sounds about right!" },
    Who_shall_I_look_for_:                  function() { return "Who shall I look for?" },
    Where_should_I_look_:                   function() { return "Where should I look?" },
    Got_it_:                                function() { return "Got it!" },
    When_should_I_do_this_:                 function() { return "When should I do this?" },
    Will_do_:                               function() { return "Will do!" },
    Use_Behaviour_:                         function() { return "Use Behaviour!" },
    On:                                     function() { return "On" },
    Ignore_presence:                        function() { return "Ignore presence" },
    Anywhere_in_the_house_:                 function() { return "Anywhere in the house!" },
    In_the_room_:                           function() { return "In the room." },
    Select_room_s____:                      function() { return "Select room(s)..." },
    All_day:                                function() { return "All day." },
    Other___:                               function() { return "Other..." },
    Select_Rooms:                           function() { return "Select Rooms" },
    Would_you_like_me_to_react:             function() { return "Would you like me to react to presence?" },
    Shall_I_do_this_at_a_certa:             function() { return "Shall I do this at a certain time?" },
    Can_I_turn_off_afterwards_:             function() { return "Can I turn off afterwards?" },
    Yes__just_turn_off_afterwa:             function() { return "Yes, just turn off afterwards." },
    Dimmed____:                             function() { return "Dimmed " + arguments[0] + "%" },
    Enable_dimming_:                        function() { return "Enable dimming!" },
    Not_right_now___:                       function() { return "Not right now..." },
    Dimming_ability_required_:              function() { return "Dimming ability required." },
    You_need_to_enable_dimmin:              function() { return "You need to enable dimming for this Crownstone in order to use it in a behaviour. Do you want to enable this now?" },
    Is_it_OK_if_I_turn_off_at:              function() { return "Is it OK if I turn off at " + arguments[0] + " if there are still people around?" },
    There_aleady_is_an_active:              function() { return "There aleady is an active " + (arguments[0] ? "twilight behaviour" : "behaviour") + " " + arguments[1] + "..." },
    _tap_to_change_:                        function() { return "(tap to change)" },
    Thats_it_:                              function() { return "That's it!" },
    _tap_to_select_:                        function() { return "(tap to select)" },
    You_can_use_in_the_house_:              function() { return "You can use \"in the house\" with less than " + arguments[0] + "." },
    _tap_to_customize_:                     function() { return "(tap to customize)" },
    _tap_to_create_:                        function() { return "(tap to create)" },
    You_can_use_in_the_house_w:             function() { return "You can use \"in the house\" with less than " + arguments[0] + "." },
  },
  ScanningForSetupCrownstones:{
    __filename: "../../js/views/addingCrownstones/ScanningForSetupCrownstones.tsx",
    Add_Crownstones:                        function() { return "Add Crownstones" },
    Searching_for_more_Crownst:             function() { return arguments[0] ? "Searching for more Crownstones..." : "Searching for new Crownstones..." },
    These_Crownstones_are_visi:             function() { return "These Crownstones are visible near you:" },
    Nothing_yet__but_Im_still_:             function() { return "Nothing yet, but I'm still looking!" },
    I_cant_find_any_BLE_device:             function() { return "I can't find any BLE devices...\n\nMake sure you're in range of the Crownstone!" },
    I_still_cant_find_any_BLE_:             function() { return "I still can't find any BLE devices...\n\nMaybe reset your phone's Bluetooth?" },
    Youre_really_close_to_a_Cr:             function() { return "You're really close to a Crownstone that is not in your Sphere, nor in setup mode. Would you like to try to recover it?" },
    _________________I_see_a_C:             function() { return "I see a Crownstone that seems to be registered to your Sphere but I don't know which one it is... Shall I add it to your app?" },
    Searching_for_a_hub___:                 function() { return "Searching for a hub..." },
    I_see_a_hub_in_setup_mode:              function() { return "I see a hub in setup mode, tap here to also show hubs..." },
    Add_a_hub:                              function() { return "Add a hub" },
  },
  SceneAdd:{
    __filename: "../../js/views/scenesViews/SceneAdd.tsx",
    Unlock_first___:                        function() { return "Unlock first..." },
    _Select_at_least_one______header:       function() { return "Select at least one..." },
    _Select_at_least_one______body:         function() { return "I don't know why you'd want to make a scene without any Crownstones..." },
    _Select_at_least_one______left:         function() { return "Right.." },
    Next:                                   function() { return "Next" },
    Create_Scene_:                          function() { return "Create Scene!" },
    Not_in_a_room___:                       function() { return "Not in a room..." },
    Lets_make_a_Scene_:                     function() { return "Let's make a Scene!" },
    What_shall_we_call_it_:                 function() { return "What shall we call it?" },
    My_new_scene:                           function() { return "My new scene" },
    For_which_Sphere_:                      function() { return "For which Sphere?" },
    Select_the_sphere_where_y:              function() { return "Select the sphere where you will use this scene." },
    Whos_participating_:                    function() { return "Who's participating?" },
    Select_the_Crownstones_wh:              function() { return "Select the Crownstones which will be part of this scene." },
    Crownstones_that_are_not_:              function() { return "Crownstones that are not selected will be left unchanged when this scene is activated." },
    What_to_do_:                            function() { return "What to do?" },
    Choose_the_desired_state_:              function() { return "Choose the desired state for your Crownstones!" },
    And_finally___:                         function() { return "And finally..." },
    Lets_pick_an_image__Somet:              function() { return "Let's pick an image! Something to quickly remember it by." },
    Preview_this_Scene_:                    function() { return "Preview this Scene!" },
  },
  SceneCreateNewItem:{
    __filename: "../../js/views/scenesViews/supportComponents/SceneCreateNewItem.tsx",
    Create_new_Scene:                       function() { return "Create new Scene" },
    Tap_me_to_get_started_Tap:              function() { return arguments[0] ? "Tap me to get started!" : "Tap me to create more Scenes!" },
  },
  SceneEdit:{
    __filename: "../../js/views/scenesViews/SceneEdit.tsx",
    SCENE_SETTINGS:                         function() { return "SCENE SETTINGS" },
    Name:                                   function() { return "Name" },
    Picture:                                function() { return "Picture" },
    PARTICIPATING_CROWNSTONES:              function() { return "PARTICIPATING CROWNSTONES" },
    Select_Crownstones:                     function() { return "Select Crownstones" },
    CHOOSE_DESIRED_STATES:                  function() { return "CHOOSE DESIRED STATES" },
    Edit_Scene:                             function() { return "Edit Scene" },
    Test_the_Scene_:                        function() { return "Test the Scene!" },
    Not_in_a_room___:                       function() { return "Not in a room..." },
    Untitled_scene:                         function() { return "Untitled scene" },
  },
  SceneIntroduction:{
    __filename: "../../js/views/scenesViews/supportComponents/SceneIntroduction.tsx",
    Add_a_sphere_to_use_Scene:              function() { return "Add a sphere to use Scenes! Tap here and create one now!" },
    Lets_make_a_Scene_:                     function() { return "Let's make a Scene!" },
    Scenes_allow_you_to_quick:              function() { return "Scenes allow you to quickly set the mood by switching multiple Crownstones with just a single touch!\n\nTap the picture to get started!" },
  },
  SceneItem:{
    __filename: "../../js/views/scenesViews/supportComponents/SceneItem.tsx",
    _Are_you_sure___Do_you_wa_header:       function() { return "Are you sure?" },
    _Are_you_sure___Do_you_wa_body:         function() { return "Do you want to delete this scene?" },
    _Are_you_sure___Do_you_wa_left:         function() { return "Cancel" },
    _Are_you_sure___Do_you_wa_right:        function() { return "OK" },
    Setting_the_scene_:                     function() { return "Setting the scene!" },
    Tap_to_edit_:                           function() { return "Tap to edit!" },
    All_rooms:                              function() { return "All rooms" },
    Multiple_rooms:                         function() { return "Multiple rooms" },
    _and_:                                  function() { return " and " },
    Not_affecting_rooms_:                   function() { return "Not affecting rooms." },
  },
  ScenePictureGallery:{
    __filename: "../../js/views/scenesViews/ScenePictureGallery.tsx",
    Take_or_select_picture___:              function() { return "Take or select picture..." },
    Custom_picture:                         function() { return "Custom picture" },
    Pick_a_picture:                         function() { return "Pick a picture" },
    Select_Picture:                         function() { return "Select Picture" },
    Bedtime:                                function() { return "Bedtime" },
    Boardgames:                             function() { return "Boardgames" },
    Cooking:                                function() { return "Cooking" },
    Dinner:                                 function() { return "Dinner" },
    Eco:                                    function() { return "Eco" },
    Gaming:                                 function() { return "Gaming" },
    Good_morning:                           function() { return "Good morning" },
    Hobby_and_art:                          function() { return "Hobby and art" },
    Movie_time:                             function() { return "Movie time" },
    Music:                                  function() { return "Music" },
    Party:                                  function() { return "Party" },
    Relax:                                  function() { return "Relax" },
    Romantic:                               function() { return "Romantic" },
    Sports:                                 function() { return "Sports" },
    Study:                                  function() { return "Study" },
    Weather:                                function() { return "Weather" },
    Take_Photo___:                          function() { return "Take Photo..." },
    Choose_from_Library___:                 function() { return "Choose from Library..." },
    Choose_which_Library___:                function() { return "Choose which Library..." },
    CANCEL:                                 function() { return "CANCEL" },
  },
  SceneSelectCrownstones:{
    __filename: "../../js/views/scenesViews/SceneSelectCrownstones.tsx",
    _Select_at_least_one______header:       function() { return "Select at least one..." },
    _Select_at_least_one______body:         function() { return "I don't know why you'd want to make a scene without any Crownstones..." },
    _Select_at_least_one______left:         function() { return "Right.." },
    Select:                                 function() { return "Select" },
    Whos_participating_:                    function() { return "Who's participating?" },
    Select_the_Crownstones_wh:              function() { return "Select the Crownstones which will be part of this scene." },
    Crownstones_that_are_not_:              function() { return "Crownstones that are not selected will be left unchanged when this scene is activated." },
  },
  ScenesOverview:{
    Add_more_scenes_by_tappin:              function() { return "Add more scenes by tapping edit!" },
    You_do_not_have_permissio:              function() { return "You do not have permission to change scenes..." },
    Ask_an_admin_in_your_Sphe:              function() { return "Ask an admin in your Sphere to help you out!" },
  },
  SeparatedItemList:{
    __filename: "../js/views/components/SeparatedItemList.tsx",
    UNKNOWN_TYPE:                           function() { return "UNKNOWN TYPE" },
  },
  SettingsApp:{
    __filename: "../js/views/settingsViews/SettingsApp.tsx",
    LANGUAGE:                               function() { return "LANGUAGE" },
    Language:                               function() { return "Language" },
    FEATURES:                               function() { return "FEATURES" },
    English:                                function() { return "English" },
    Nederlands:                             function() { return "Nederlands" },
    Use_Tap_To_Toggle:                      function() { return "Use Tap-to-Toggle" },
    Tap_to_toggle_allows_you_:              function() { return "Tap-to-toggle allows you to hold your phone against a Crownstone to toggle it automatically!" },
    If_indoor_localization_is:              function() { return "If indoor localization is disabled, tap-to-toggle does only work when the app is on the screen." },
    Use_Indoor_localization:                function() { return "Use Indoor localization" },
    Indoor_localization_allow:              function() { return "Indoor localization allows you to use the Crownstone behaviour and tap-to-toggle.\n\nIf you don't want to use these features, you can disable Indoor Localization and use the app as a remote control.\n\n" },
    App_Settings:                           function() { return "App Settings" },
    Sensitivity:                            function() { return "Sensitivity" },
    Tap_to_toggle_when_the_ph:              function() { return "Tap to toggle when the phone is close to a Crownstone." },
    Tap_to_toggle_when_the_pho:             function() { return "Tap to toggle when the phone is very close to a Crownstone." },
    Tap_to_toggle_when_the_phon:            function() { return "Tap to toggle when the phone is close to a Crownstone.\nNOTE: It might not be possible to get close enough!" },
    Tap_to_toggle_when_the_phone:           function() { return "Tap to toggle when the phone is near a Crownstone." },
    Tap_to_toggle_when_the_phone_:          function() { return "Tap to toggle when the phone is near a Crownstone.\nNOTE: the Crownstone will keep toggling when you're in range. This might be undesired." },
  },
  SettingsBleTroubleshooting:{
    __filename: "../js/views/settingsViews/SettingsBleTroubleshooting.tsx",
    BLE_Troubleshooting:                    function() { return "BLE Troubleshooting" },
  },
  SettingsBleTroubleshootingAndroid:{
    __filename: "../../js/views/settingsViews/troubleshooting/SettingsBleTroubleshootingAndroid.tsx",
    Troubleshooting:                        function() { return "Troubleshooting" },
    Sometimes__the_Bluetooth_o:             function() { return "Sometimes, the Bluetooth on your phone can act up, refuse to work or be stuck on a connection." },
    Unfortunately__sometimes_t:             function() { return "Unfortunately, sometimes things go wrong, and we're not allowed by the phone manufacturers to reset the Bluetooth chip (and rightfully so!).\n\n" + "There are a few things you can do however, to fix most of these issues. This guide will walk you through the steps to reset your Bluetooth." },
    To_reset_Bluetooth__simply:             function() { return "To reset Bluetooth, simply pull down the notification bar to get to the quick settings:" },
    Turn_off_Bluetooth_by_clic:             function() { return "Turn off Bluetooth by clicking the Bluetooth icon, and wait until it turns grey." },
    Then_turn_Bluetooth_on_aga:             function() { return "Then turn Bluetooth on again by clicking the same icon. Your Bluetooth has now been restarted, which will solve most related problems.\n\n" + "If any issues persist, you can try restarting your phone or run the diagnostics in the Crownstone app.\n\n" + "If none of this works for you, contact us at team@crownstone.rocks and we'd be happy to help you solve the issue!" },
    Enjoy_using_your_Crownston:             function() { return "Enjoy using your Crownstones!" },
  },
  SettingsBleTroubleshootingIOS:{
    __filename: "../js/views/settingsViews/troubleshooting/SettingsBleTroubleshootingIOS.tsx",
    Troubleshooting:                        function() { return "Troubleshooting" },
    Sometimes__the_Bluetooth_:              function() { return "Sometimes, the Bluetooth on your iPhone can act up, refuse to work or be stuck on a connection." },
    Unfortunately__sometimes_:              function() { return "Unfortunately, sometimes things go wrong, and we're not allowed by the phone manufacturers reset the Bluetooth chip (and rightfully so!).\n\n" + "There are a few things you can do however, to fix most of these issues. This guide will walk you through the steps to reset your Bluetooth on iOS." },
    Im_sure_youre_all_familia:              function() { return "I'm sure you're all familiar with the Apple Control Center. If you're not, it's this one:" },
    There_is_a_Bluetooth_icon:              function() { return "There is a Bluetooth icon on there, but if you press it, you do NOT disable Bluetooth. You only tell it to stop connecting:" },
    To_reset_Bluetooth_the_ri:              function() { return "To reset Bluetooth the right way, we have to go into the settings of your iPhone by pressing on the cogwheel icon:" },
    In_the_settings_overview_:              function() { return "In the settings overview, we select the Bluetooth bar:" },
    Finally__in_the_Bluetooth:              function() { return "Finally, in the Bluetooth menu, we disable Bluetooth by tapping on the switch:" },
    The_result_should_be_:                  function() { return "The result should be:" },
    You_wait_for_a_few_second:              function() { return "You wait for a few seconds and then turn Bluetooth back on. Your Bluetooth has now been restarted, which will solve most related problems.\n\n" + "If any issues persist, you can try restarting your iPhone or run the Diagnostics in the Crownstone app.\n\n" + "If none of this works for you, contact us at team@crownstone.rocks and we'd be happy to help you solve the issue!" },
    Enjoy_using_your_Crownsto:              function() { return "Enjoy using your Crownstones!" },
  },
  SettingsDiagnostics:{
    __filename: "../js/views/settingsViews/SettingsDiagnostics.tsx",
    Database_is_healthy:                    function() { return "Database is healthy" },
    Scanning_is_enabled:                    function() { return "Scanning is enabled" },
    Since_everything_communic:              function() { return "Since everything communicates via wireless signals, it is sometimes a little difficult to see what is happening if something goes wrong." },
    I_can_run_a_few_tests_to_:              function() { return "I can run a few tests to check if everything is working as intended! Press the button below to start the tests." },
    Run_diagnostics:                        function() { return "Run diagnostics" },
    Running_initial_tests___:               function() { return "Running initial tests..." },
    Diagnostics:                            function() { return "Diagnostics" },
  },
  SettingsFAQ:{
    __filename: "../js/views/settingsViews/SettingsFAQ.tsx",
    Revert_to_Cloud_Data:                   function() { return "Revert to Cloud Data" },
    Reset_Crownstone:                       function() { return "Reset Crownstone" },
    Frequently_Asked_Question:              function() { return "Frequently Asked Questions\n\nHow do I ..." },
    ____add_a_Crownstone_:                  function() { return "... add a Crownstone?" },
    ____add_someone_to_my_Sph:              function() { return "... add someone to my Sphere?" },
    ____create_a_room_:                     function() { return "... create a room?" },
    ____move_a_Crownstone_to_:              function() { return "... move a Crownstone to a room?" },
    ____dim_with_my_Crownston:              function() { return "... dim with my Crownstone?" },
    ____use_indoor_localizati:              function() { return "... use indoor localization?" },
    What_to_do_if____:                      function() { return "What to do if ..." },
    ____a_new_Crownstone_wont:              function() { return "... a new Crownstone won't show up." },
    ____a_Crownstone_is_on_Se:              function() { return "... a Crownstone is on 'Searching'." },
    ____I_want_to_have_a_clea:              function() { return "... I want to have a clean install." },
    ____my_Sphere_name_is_gon:              function() { return "... my Sphere name is gone and things are weird." },
    ____it_always_says_No_Cro:              function() { return "... it always says 'No Crownstones in Range'." },
    ____the_setup_process_fai:              function() { return "... the setup process fails." },
    ____a_Crownstone_toggles_:              function() { return "... a Crownstone toggles unexpectedly." },
    ____I_need_to_factory_res:              function() { return "... I need to factory reset a Crownstone." },
    Solve_most_BLE_issues:                  function() { return "Solve most BLE issues" },
    BLE_Troubleshooting:                    function() { return "BLE Troubleshooting" },
    More_help_is_available_on:              function() { return "More help is available on the website" },
    Help:                                   function() { return "Help" },
    App_Store:                              function() { return "App Store" },
    Play_Store:                             function() { return "Play Store" },
    If_that_fails__quit_the_a:              function() { return "If that fails, quit the app (double tap home button and swipe it up to really close it).\n" },
    If_that_fails__quit_the_ap:             function() { return "If that fails, quit the app (Go to the side menu and select force quit).\n" },
    You_just_have_to_hold_it_:              function() { return "You just have to hold it close if the Crownstone is in setup mode:\n\n- Go to the Sphere Overview\n  (with the room bubbles)\n- Tap the + button and select add Crownstone.\n- Follow the steps." },
    If_youre_an_Admin_or_Memb:              function() { return "If you're an Admin or Member you can invite people.\n\n- Go to the Settings -> Spheres\n- Select the Sphere you want to add people to.\n- Select 'Invite someone new'" },
    You_need_to_be_an_admin_o:              function() { return "You need to be an admin of the Sphere to add rooms.\n\n- Go to the Sphere Overview\n  (with the room bubbles)\n- Tap the icon  with the + sign on it in the lower right corner.\n- Select add room." },
    Moving_the_Crownstone_is_:              function() { return "Moving the Crownstone is done in the Crownstone overview:\n\n- Go to the Sphere Overview\n  (with the room bubbles)\n- Tap the bubble containing your Crownstone.\n- Select the Crownstone you want to move.\n- Tap 'Located in' in the top right corner." },
    Make_sure_dimming_is_enab:              function() { return "Make sure dimming is enabled on the Crownstone:\n\n- Make sure you are an Admin.\n- Go to the Sphere Overview\n    (with the room bubbles)\n- Tap on a room.\n- Select the Crownstone you want to dim.\n- Tap the abilities button.\n- Enable the Dimming Ability." },
    Indoor_localization_on_ro:              function() { return "Indoor localization on room level works when you have 4 or more Crownstones. If you have less than 4, you can use home enter/exit and near/far. You set these rules per Crownstone.\n\n- Go to the Sphere Overview\n    (with the room bubbles)\n- Tap on a room.\n- Select a Crownstone.\n- Swipe the Crownstone overview left to go to the Behaviours.\n" },
    Make_sure_the_Crownstone_:              function() { return "Make sure the Crownstone is powered and that you're close to it. During setup mode the Crownstone is transmitting very quietly so other people can't claim your Crownstones!\n\nIf it still won't show up, you may want to try the factory reset procedure (see 'what to do if I need to factory reset a Crownstone' below)." },
    Ensure_there_is_power_on_:              function() { return "Ensure there is power on the Crownstone and that you can reach it.\n\nIf you're near (within a meter) and it is still on 'Searching' you may want to try the factory reset procedure (see 'what to do if I need to factory reset a Crownstone' below)." },
    Retry_a_few_times___If_th:              function() { return "Retry a few times.\n\nIf that fails, turn your bluetooth off and on.\n\n" + arguments[0] + "Check if there are updates available in the " + arguments[1] + ".\n\n" +
                                                  "Certain Android phones have issues with Bluetooth. If you have a different phone available, log in there with your account and use that phone to do the setup."},
    This_could_happen_due_to_:              function() { return "This could happen due to Tap-to-Toggle. If this is the case, you can retrain or disable it.\n\nSphere enter and sphere exit require you to be in range of the Crownstones as well as the app running in the background." },
    Sometimes_something_goes_:              function() { return "Sometimes something goes wrong in the persisting of the local data.\n\nTo solve this you can try to redownload the data from the Cloud. Press the button below to do this." },
    Sometimes_something_goes_w:             function() { return "Sometimes something goes wrong in the persisting of the local data.\n\nTo solve this you can try to redownload the data from the Cloud. Press the button below to do this." },
    It_could_be_that_youre_no:              function() { return "It could be that you're not close enough to the nearest Crownstone. Try going closer.\n\n" + "If that does not work, try to restarting your Bluetooth, restarting the App or even restarting your Phone.\n\n" + "If that does not work either, you can try to press the button below to resync with the Cloud. This will delete all your local preferences and replace it by the data in the Cloud." },
    Only_use_this_as_a_last_r:              function() { return "Only use this as a last resort. \n\n- Tap the button below and follow the instructions.\n" + "- If something goes wrong, read the error message. It explains what is going on." },
    FAQ:                                    function() { return "FAQ" },
  },
  SettingsFactoryResetStep1:{
    __filename: "../js/views/settingsViews/SettingsFactoryResetStep1.tsx",
    If_youre_physically_next_:              function() { return "If you're physically next to the Crownstone, you can reset it to factory defaults." },
    Please_take_the_Crownston:              function() { return "Please take the Crownstone out of the outlet, wait 5 seconds, and plug it back in. Hold your phone close to it and press Next to continue." },
    Factory_Reset:                          function() { return "Factory Reset" },
  },
  SettingsFactoryResetStep2:{
    __filename: "../js/views/settingsViews/SettingsFactoryResetStep2.tsx",
    _Crownstone_in_Setup_mode_header:       function() { return "Crownstone in Setup mode nearby." },
    _Crownstone_in_Setup_mode_body:         function() { return "We detect a Crownstone in setup mode close by, as well as one in normal mode which is already in your Sphere (" + arguments[0] + "). Do you want to try to factory reset your own Crownstone?" },
    _Crownstone_in_Setup_mode_left:         function() { return "Cancel" },
    _Crownstone_in_Setup_mode_right:        function() { return "Recover" },
    _Crownstone_in_Setup_mode__header:      function() { return "Crownstone in Setup mode nearby." },
    _Crownstone_in_Setup_mode__body:        function() { return "We detect a Crownstone in setup mode close by, as well as one in normal mode which is already in your Sphere and a bit farther away (" + arguments[0] + "). If you want to try to factory reset this one, move closer to it." },
    _Crownstone_in_Setup_mode__left:        function() { return "OK" },
    _Crownstone_in_Setup_mode_n_header:     function() { return "Crownstone in Setup mode nearby." },
    _Crownstone_in_Setup_mode_n_body:       function() { return "We detect a Crownstone in setup mode close by, as well as one in normal mode that is not in your Spheres. Do you still want to try to factory reset the one in normal mode?" },
    _Crownstone_in_Setup_mode_n_left:       function() { return "Cancel" },
    _Crownstone_in_Setup_mode__right:       function() { return "Recover" },
    _Crownstone_in_Setup_mode_ne_header:    function() { return "Crownstone in Setup mode nearby." },
    _Crownstone_in_Setup_mode_ne_body:      function() { return "We detect a Crownstone in setup mode close by, and one in normal mode (that is not in your Spheres) a bit further away. Do you still want to try to factory reset the one in normal mode?" },
    _Crownstone_in_Setup_mode_ne_left:      function() { return "Cancel" },
    _Crownstone_in_Setup_mode_n_right:      function() { return "Recover" },
    _No_unknown_Crownstone_ne_header:       function() { return "No unknown Crownstone nearby." },
    _No_unknown_Crownstone_ne_body:         function() { return "We detect a Crownstone that is already in your Sphere (" + arguments[0] + "). Do you want to try to factory reset your own Crownstone?" },
    _No_unknown_Crownstone_ne_left:         function() { return "Cancel" },
    _No_unknown_Crownstone_ne_right:        function() { return "Recover" },
    _No_unknown_Crownstones_f_header:       function() { return "No unknown Crownstones found." },
    _No_unknown_Crownstones_f_body:         function() { return "We detect a Crownstone that is already in your Sphere (" + arguments[0] + ") and not very close. If you want to try to factory reset this one, move closer to it." },
    _No_unknown_Crownstones_f_left:         function() { return "OK" },
    _No_Crownstones_near___We_header:       function() { return "No Crownstones near." },
    _No_Crownstones_near___We_body:         function() { return "We detect a Crownstone but it's not very close by. Please move closer and try again. If you are already holding your phone very close to the Crownstone something may be wrong." },
    _No_Crownstones_near___We_left:         function() { return "OK" },
    _Recovery_might_not_be_ne_header:       function() { return "Recovery might not be needed." },
    _Recovery_might_not_be_ne_body:         function() { return "We can not find a suitable Crownstone in range, though there is a Crownstone in setup mode close by. Maybe the Crownstone has already been set to factory defaults? Try adding it to your Sphere!" },
    _Recovery_might_not_be_ne_left:         function() { return "OK" },
    _No_nearby_Crownstones____header:       function() { return "No nearby Crownstones." },
    _No_nearby_Crownstones____body:         function() { return "We can't find any Crownstones nearby, please follow the steps again to retry. Make sure to hold your phone close!" },
    _No_nearby_Crownstones____left:         function() { return "OK" },
    _Success___This_Crownston_header:       function() { return "Success!" },
    _Success___This_Crownston_body:         function() { return "This Crownstone has been reset to factory defaults. After plugging it in and out once more, you can add it to a new Sphere." },
    _Success___This_Crownston_left:         function() { return "OK" },
    _Not_in_Factory_Reset_mod_header:       function() { return "Not in Factory Reset mode." },
    _Not_in_Factory_Reset_mod_body:         function() { return "You have 20 seconds after you plug the Crownstone in to factory reset it. Please follow the steps again to retry." },
    _Not_in_Factory_Reset_mod_left:         function() { return "OK" },
    _Error_during_Factory_Res_header:       function() { return "Error during Factory Reset." },
    _Error_during_Factory_Res_body:         function() { return "Please repeat the process to try again." },
    _Error_during_Factory_Res_left:         function() { return "OK" },
    Hold_your_phone_next_to_t:              function() { return "Hold your phone next to the Crownstone." },
    Resettings:                             function() { return "Resetting..." },
  },
  SettingsMeshOverview:{
    __filename: "../js/views/settingsViews/SettingsMeshOverview.tsx",
    network:                                function() { return "Network #" + arguments[0] + ":" },
    not_in_mesh:                            function() { return "Not in Mesh:" },
    Here_you_can_see_which_Cr:              function() { return "Here you can see which Crownstones in your Sphere are connected via the Mesh." },
    It_can_take_some_time_for:              function() { return "It can take some time for me to hear what is connected to what. Make sure your phone is near Crownstones to hear they are connected to. If one Crownstone cannot see the others, try moving it closer to the nearest one." },
    Mesh_Networks_:                         function() { return "Mesh Networks:" },
    Mesh_Overview:                          function() { return "Mesh Overview" },
  },
  SettingsMeshTopology:{
    __filename: "../js/views/settingsViews/SettingsMeshTopology.tsx",
    _Refresh_Topology__While__header:       function() { return "Refresh Topology" },
    _Refresh_Topology__While__body:         function() { return "While the topology updates automatically, if you move a Crownstone out of range of the others " + "it will take a while for the connection to time out. Manually refreshing like this will speed up this process." },
    _Refresh_Topology__While__left:         function() { return "Cancel" },
    _Refresh_Topology__While__right:        function() { return "OK" },
    Networks:                               function() { return "Networks" },
    Refreshing_Mesh_Topology_:              function() { return "Refreshing Mesh Topology\n\n(" + arguments[0] + " out of " + arguments[1] + ")" },
    Floating___:                            function() { return "Floating..." },
    No_Crownstones_in_Sphere_:              function() { return "No Crownstones in Sphere \"" + arguments[0] + "\" yet." },
    Mesh_Topology:                          function() { return "Mesh Topology" },
    Refreshing_Mesh_Topology_Start:         function() { return "Refreshing Mesh Topology\n\nStarting..." },
  },
  SettingsMeshTopologyHelp:{
    __filename: "../js/views/settingsViews/SettingsMeshTopologyHelp.tsx",
    Mesh_Topology:                          function() { return "Mesh Topology" },
    Crownstones_can_talk_to_e:              function() { return "Crownstones can talk to each other, and a group of Crownstones chatting makes up a mesh network." + "\n\nThey can only talk to each other if they are in range of each other. The topology view shows you which Crownstones can talk to each other." + "\n\nThe icons show the Crownstone with its device icon as shown here:" },
    Every_other_second_the_Cr:              function() { return "Every other second the Crownstones will advertise the state of other Crownstones, as well as how well they can hear them. " + "This information is gathered by your phone when the app is open (on the foreground)." + "\n\nIf your phone can hear this information from a Crownstone, the border of the circle will become green:" },
    Every_second__the_backgro:              function() { return "Every second, the background will blink green to show you you're still in range of that Crownstone." + "\n\nIf you tap on the bubble, it will expand to show you its name and the room that it's currently in:" },
    The_connectivity_among_Cr:              function() { return "The connectivity among Crownstones can only be heard directly. If there are unconnected Crownstones in the overview and " + "you want to check how well they are connected to rest of the network, you'll have to be in range of that Crownstone to check." + "\n\nAs an alternative, you can press the 'Networks' button in the top right to see which Crownstones are in which network." + "\n\nThese networks will be cleared and rediscovered every time you reopen the app as an ensurance that the mesh networks are always up te date." },
    Enjoy_the_Mesh_:                        function() { return "Enjoy the Mesh!" },
    Mesh_Help:                              function() { return "Mesh Help" },
    Movie_Room:                             function() { return "Movie Room" },
    Device:                                 function() { return "Device" },
  },
  SettingsOverview:{
    __filename: "../js/views/settingsViews/SettingsOverview.tsx",
    Crownstone_:                            function() { return "Crownstone " },
    terms_:                                 function() { return "terms" },
    __:                                     function() { return " & " },
    privacy_policy:                         function() { return "privacy policy" },
    version__:                              function() { return "version: " + arguments[0] },
    Settings:                               function() { return "Settings" },
    _Are_you_sure___Crownston_header:       function() { return "Are you sure?" },
    _Are_you_sure___Crownston_body:         function() { return "Crownstones will not respond to you if you force quit the app. It will not run in the background anymore either." },
    _Are_you_sure___Crownston_left:         function() { return "Cancel" },
    _Are_you_sure___Crownston_right:        function() { return "OK" },
    _Log_out__Are_you_sure__I_header:       function() { return "Log out" },
    _Log_out__Are_you_sure__I_body:         function() { return "Are you sure? I will tidy up and close the app. Next time you open it you can log in again!" },
    _Log_out__Are_you_sure__I_left:         function() { return "Cancel" },
    _Log_out__Are_you_sure__I_right:        function() { return "OK" },
    Force_Quit:                             function() { return "Force Quit" },
    My_Account:                             function() { return "My Account" },
    My_AccountLabel:                        function() { return "MY PROFILE" },
    Privacy:                                function() { return "Privacy" },
    PrivacyLabel:                           function() { return "You are in control of which data is shared with the cloud." },
    ConfigurationLabel:                     function() { return "CONFIGURATION" },
    App_Settings:                           function() { return "App Settings" },
    TROUBLESHOOTING:                        function() { return "TROUBLESHOOTING" },
    Diagnostics:                            function() { return "Diagnostics" },
    Help:                                   function() { return "Help" },
    Log_Out:                                function() { return "Log Out" },
  },
  SettingsPrivacy:{
    __filename: "../js/views/settingsViews/SettingsPrivacy.tsx",
    _Phone_Details_Removed__W_header:       function() { return "Phone Details Removed" },
    _Phone_Details_Removed__W_body:         function() { return "We have removed your phone details from the Cloud." },
    _Phone_Details_Removed__W_left:         function() { return "OK" },
    _Whoops___We_could_not_re_header:       function() { return "Whoops!" },
    _Whoops___We_could_not_re_body:         function() { return "We could not remove your phone details from the Cloud. Please try again later." },
    _Whoops___We_could_not_re_left:         function() { return "OK" },
    You_can_choose_what_you_w:              function() { return "You can choose what you want to share with the cloud and what you prefer to keep on your phone.\n\n" + "If you have multiple users in a Sphere, sharing location is required to see them in the overview." },
    Share_location:                         function() { return "Share location" },
    Show_the_other_people_in_:              function() { return "Show the other people in your Sphere in which room you are!" },
    Share_switch_state:                     function() { return "Share switch state" },
    Show_the_other_people_in_y:             function() { return "Show the other people in your sphere if the Crownstone is on or off!" },
    Share_phone_type_details:               function() { return "Share phone type details" },
    Help_us_improve_your_expe:              function() { return "Help us improve your experience by sharing what type of phone you have!" },
    Privacy_Policy:                         function() { return "Privacy Policy" },
    Privacy:                                function() { return "Privacy" },
  },
  SettingsProfile:{
    __filename: "../js/views/settingsViews/SettingsProfile.tsx",
    _First_name_must_be_at_le_header:       function() { return "First name must be at least 1 letter long" },
    _First_name_must_be_at_le_body:         function() { return "No numbers allowed either." },
    _First_name_must_be_at_le_left:         function() { return "OK" },
    _Are_you_sure_you_want_to_header:       function() { return "Are you sure you want to reset your password?" },
    _Are_you_sure_you_want_to_body:         function() { return "You will receive a password reset email with instructions at \'" + arguments[0] + "\'. You will be logged out when the email has been sent." },
    _Are_you_sure_you_want_to_left:         function() { return "Cancel" },
    _Are_you_sure_you_want_to_right:        function() { return "OK" },
    _Reset_email_has_been_sen_header:       function() { return "Reset email has been sent" },
    _Reset_email_has_been_sen_body:         function() { return "You will now be logged out. Follow the instructions in the email and log in with your new password." },
    _Reset_email_has_been_sen_left:         function() { return "OK" },
    _Cannot_Send_Email_argume_header:       function() { return "Cannot Send Email" },
    _Cannot_Send_Email_argume_body:         function() { return arguments[0] },
    _Cannot_Send_Email_argume_left:         function() { return "OK" },
    First_Name:                             function() { return "First Name" },
    Last_Name:                              function() { return "Last Name" },
    Email:                                  function() { return "Email" },
    Change_Password:                        function() { return "Change Password" },
    Enable_Developer_Mode:                  function() { return "Enable Developer Mode" },
    This_will_enable_certain_:              function() { return "This will enable certain features that are useful for developers. Only use if you know what you\'re doing." },
    My_Account:                             function() { return "My Account" },
  },
  SettingsRedownloadFromCloud:{
    __filename: "../js/views/settingsViews/SettingsRedownloadFromCloud.tsx",
    Replace_local_data_with_C:              function() { return "Replace local data with Cloud data" },
    To_restore_your_local_dat:              function() { return "To restore your local data with the Cloud data, press the button below. If you don't want to do this, just go back to the help menu.\n\n" + "Replacing the local data with the 'fresh' Cloud data might solve some issues you experience in your app." },
    Im_sure__do_it_:                        function() { return "I'm sure, do it!" },
    Reset_from_Cloud:                       function() { return "Reset from Cloud" },
  },
  SetupCircle:{
    __filename: "../../js/views/components/animated/SetupCircle.tsx",
    __:                                     function() { return arguments[0] + " %" },
  },
  SetupCrownstone:{
    __filename: "../../js/views/addingCrownstones/SetupCrownstone.tsx",
    add_a_new_room_:                        function() { return "add a new room!" },
    OK__try_again_:                         function() { return "OK, try again!" },
    Ill_try_again_later___:                 function() { return "I'll try again later..." },
    Next:                                   function() { return "Next" },
    Add_more_Crownstones_:                  function() { return "Add more Crownstones!" },
    Take_me_to__:                           function() { return "Take me to " + arguments[0] + "!" },
    New_Crownstone:                         function() { return "New Crownstone" },
    Restoring_Crownstone:                   function() { return "Restoring Crownstone" },
    Aborting___Abort:                       function() { return arguments[0] ? "Aborting..." : "Abort" },
    Im_almost_done_:                        function() { return "I'm almost done!" },
    My_New_Crownstone:                      function() { return "My New Crownstone" },
    Restoring_Crownstone___:                function() { return "Restoring Crownstone..." },
    This_should_only_take_a_m:              function() { return "This should only take a minute!" },
    Something_went_wrong__:                 function() { return "Something went wrong.." },
    Please_verify_that_you_ar:              function() { return "Please verify that you are connected to the internet and try again." },
    Please_restart_the_Blueto:              function() { return "Please restart the Bluetooth on your phone and make sure you're really close to this Crownstone!" },
    Please_try_again_later_:                function() { return "Please try again later!" },
    Aborted_:                               function() { return "Aborted." },
    The_Crownstone_was_not_ad:              function() { return "The Crownstone was not added to your Sphere." },
    Lets_get_started_:                      function() { return "Let's get started!" },
    What_shall_I_call_this_Cr:              function() { return "What shall I call this Crownstone?" },
    Default_name_it_is_:                    function() { return "Default name it is!" },
    Thats_a_good_name_:                     function() { return "That's a good name!" },
    Lets_pick_an_icon_:                     function() { return "Let's pick an icon!" },
    Lets_give_this_Crownstone:              function() { return "Let's give this Crownstone an icon so we can quickly recognize it!" },
    You_can_always_change_thi:              function() { return "You can always change this later in the Crownstone's settings." },
    Cool__so_thatll_be_my_ico:              function() { return "Cool, so that'll be my icon!" },
    Lets_pick_a_room_:                      function() { return "Let's pick a room!" },
    In_which_room_did_you_put:              function() { return "In which room did you put " + arguments[0] + "?" },
    Working_on_it_:                         function() { return "Working on it!" },
    Setting_up_your_new_Crown:              function() { return "Setting up your new Crownstone now..." },
    Thats_it_:                              function() { return "That's it!" },
    Would_you_like_to_setup_m:              function() { return "Would you like to setup more Crownstones or is this enough for now?" },
    Setup_complete_:                        function() { return "Setup complete." },
    This_Crownstone_was_added:              function() { return "This Crownstone was added to your Sphere before I aborted the process. You can remove it from your Sphere in this Crownstone's settings if you'd like." },
    I_know_this_one_:                       function() { return "I know this one!" },
    This_Crownstone_was_alrea:              function() { return "This Crownstone was already in your Sphere. I've restored it to the way it was!\n\n" + "Name: " + arguments[0] + "\n" + "Room: " + (arguments[1] || "Unknown") + "\n\n" + "What would you like to do now?" },
  },
  SetupDeviceEntry:{
    __filename: "../js/views/components/deviceEntries/SetupDeviceEntry.tsx",
    Tap_here_to_add_it_to_thi:              function() { return "Tap here to add me to this Sphere!" },
    I_need_to_be_setup_up_again:            function() { return "I need to be set up again... Tap me!" },
    _Very_Near_:                            function() { return "(Very Near)" },
    _Near_:                                 function() { return "(Near)" },
    _Visible_:                              function() { return "(Visible)" },
    _Barely_visible_:                       function() { return "(Barely visible)" },
    _Too_far_away_:                         function() { return "(Too far away)" },
    Toggling____You_should_he:              function() { return "Toggling... You should hear two clicks." },
    _Something_went_wrong_____header:       function() { return "Something went wrong..." },
    _Something_went_wrong_____body:         function() { return "You can try it again if you're close to the Crownstone." },
    _Something_went_wrong_____left:         function() { return "OK" },
  },
  SetupHub:{
    __filename: "../../js/views/addingCrownstones/SetupHub.tsx",
    add_a_new_room_:                        function() { return "add a new room!" },
    OK__try_again_:                         function() { return "OK, try again!" },
    Ill_try_again_later___:                 function() { return "I'll try again later..." },
    Next:                                   function() { return "Next" },
    Add_more_Crownstones_:                  function() { return "Add more Crownstones!" },
    Take_me_to__:                           function() { return "Take me to " + arguments[0] + "!" },
    Aborting___Abort:                       function() { return arguments[0] ? "Aborting..." : "Abort" },
    Im_almost_done_:                        function() { return "I'm almost done!" },
    This_should_only_take_a_m:              function() { return "This should only take a minute!" },
    Something_went_wrong__:                 function() { return "Something went wrong.." },
    Please_verify_that_you_ar:              function() { return "Please verify that you are connected to the internet and try again." },
    Please_restart_the_Blueto:              function() { return "Please restart the Bluetooth on your phone and make sure you're really close to this Crownstone!" },
    Please_try_again_later_:                function() { return "Please try again later!" },
    Aborted_:                               function() { return "Aborted." },
    The_Crownstone_was_not_ad:              function() { return "The Crownstone was not added to your Sphere." },
    Default_name_it_is_:                    function() { return "Default name it is!" },
    Thats_a_good_name_:                     function() { return "That's a good name!" },
    Lets_pick_an_icon_:                     function() { return "Let's pick an icon!" },
    Lets_give_this_Crownstone:              function() { return "Let's give this Crownstone an icon so we can quickly recognize it!" },
    You_can_always_change_thi:              function() { return "You can always change this later in the Crownstone's settings." },
    Cool__so_thatll_be_my_ico:              function() { return "Cool, so that'll be my icon!" },
    Lets_pick_a_room_:                      function() { return "Let's pick a room!" },
    In_which_room_did_you_put:              function() { return "In which room did you put " + arguments[0] + "?" },
    Working_on_it_:                         function() { return "Working on it!" },
    Setting_up_your_new_Crown:              function() { return "Setting up your new Crownstone now..." },
    Thats_it_:                              function() { return "That's it!" },
    Would_you_like_to_setup_m:              function() { return "Would you like to setup more Crownstones or is this enough for now?" },
    Setup_complete_:                        function() { return "Setup complete." },
    This_Crownstone_was_added:              function() { return "This Crownstone was added to your Sphere before I aborted the process. You can remove it from your Sphere in this Crownstone's settings if you'd like." },
    I_know_this_one_:                       function() { return "I know this one!" },
    This_Crownstone_was_alrea:              function() { return "This Crownstone was already in your Sphere. I've restored it to the way it was!\n\n" + "Name: " + arguments[0] + "\n" + "Room: " + (arguments[1] || "Unknown") + "\n\n" + "What would you like to do now?" },
  },
  SetupShared:{
    __filename: "../js/views/settingsViews/SetupShared.tsx",
    Next:                                   function() { return "Next" },
    Start_setup:                            function() { return "Start setup" },
    Skip:                                   function() { return "Skip" },
    Cancel:                                 function() { return "Cancel" },
  },
  SmartBehaviourRule:{
    __filename: "../../js/views/deviceViews/smartBehaviour/supportComponents/SmartBehaviourRule.tsx",
    _Started_Yesterday_:                    function() { return "(Started Yesterday)" },
    _Are_you_sure___Since_thi_header:       function() { return "Are you sure?" },
    _Are_you_sure___Since_thi_body:         function() { return "Since this behaviour is only active on this day, removing it will remove it completely." },
    _Are_you_sure___Since_thi_left:         function() { return "Cancel" },
    _Are_you_sure___Since_thi_right:        function() { return "I'm sure" },
    __Not_on_Crownstone_yet__:              function() { return "( Not on Crownstone yet... )" },
    __Not_removed_from_Crowns:              function() { return "( Not removed from Crownstone yet... )" },
    Indoor_localization_disab:              function() { return "Indoor localization disabled for this phone (in app settings)." },
  },
  SmartBehaviourSummaryGraph:{
    __filename: "../../js/views/deviceViews/elements/smartBehaviour/supportComponents/SmartBehaviourSummaryGraph.tsx",
    When_I_will_be_on_:                     function() { return "When I will be on." },
    Now:                                    function() { return "Now" },
    Sunrise:                                function() { return "Sunrise" },
    Sunset:                                 function() { return "Sunset" },
    When_twilight_mode_is_acti:             function() { return "When twilight mode is active." },
  },
  SmartHomeStateButton:{
    __filename: "../../js/views/main/buttons/SmartHomeStateButton.tsx",
  },
  Sphere:{
    __filename: "../js/views/main/Sphere.tsx",
    No_Crownstones_added_yet_:              function() { return "No Crownstones added yet!" },
    Ask_the_admin_of_this_Sph:              function() { return "Ask the admin of this Sphere to add some!" },
    Ask_the_admin_of_this_SphHandle:        function() { return "Ask the admin of this Sphere to handle this." },
    Crownstones_require_rooms:              function() { return "Crownstones require rooms." },
  },
  SphereBehaviour:{
    __filename: "../js/views/main/editSubviews/SphereBehaviour.tsx",
    _5_Minutes:                             function() { return "5 Minutes" },
    _10_Minutes:                            function() { return "10 Minutes" },
    _15_Minutes:                            function() { return "15 Minutes" },
    _30_Minutes:                            function() { return "30 Minutes" },
    SPHERE_EXIT_DELAY:                      function() { return "SPHERE EXIT DELAY" },
    Delay:                                  function() { return "Delay" },
    If_nobody_is_left_in_the_:              function() { return "If nobody is left in the sphere, the Crownstones that are configured to switch when you leave the sphere will do so after this delay." },
    Sphere_behaviour:                       function() { return "Sphere behaviour" },
  },
  SphereCrownstoneOverview:{
    __filename: "../js/views/main/editSubviews/SphereCrownstoneOverview.tsx",
    _Ask_your_Sphere_Admin__A_header:       function() { return "Ask your Sphere Admin" },
    _Ask_your_Sphere_Admin__A_body:         function() { return "Admins can add new Crownstones to Spheres. If you have a new Crownstone you'd like to add, ask the sphere Admin." },
    _Ask_your_Sphere_Admin__A_left:         function() { return "OK" },
    There_are_no_Crownstones_:              function() { return "There are no Crownstones in this Sphere yet!" },
    This_is_an_overview_of_al:              function() { return "This is an overview of all your Crownstones. To access the settings of these Crownstones, go to their rooms and tap on them there." },
    Add_a_Crownstone:                       function() { return "Add a Crownstone" },
    CROWNSTONES_IN_:                        function() { return "CROWNSTONES IN " + arguments[0] },
    Crownstones_in_:                        function() { return "Crownstones in " + arguments[0] },
  },
  SphereDeleted:{
    __filename: "../js/views/static/SphereDeleted.tsx",
    Sphere_Deleted_:                        function() { return "Sphere Deleted." },
    Deleted:                                function() { return "Deleted" },
  },
  SphereEdit:{
    __filename: "../js/views/main/SphereEdit.tsx",
    Syncing_with_the_Cloud___:              function() { return "Syncing with the Cloud..." },
    What_can_I_help_you_with_:              function() { return "What can I help you with?" },
    Create_Sphere:                          function() { return "Create Sphere" },
    Create_a_new_Sphere:                    function() { return "Create a new Sphere" },
    A_Sphere_contains_your_Cr:              function() { return "A Sphere contains your Crownstones, Rooms and preferences. You can add others to your Sphere so they may also use your Crownstones!" },
    Rooms:                                  function() { return "Rooms" },
    Crownstones:                            function() { return "Crownstones" },
    Hubs:                                   function() { return "Hubs" },
    Users:                                  function() { return "Users" },
    Behaviour:                              function() { return "Behaviour" },
    Integrations:                           function() { return "Integrations" },
    Settings:                               function() { return "Settings" },
    Sphere_Creation:                        function() { return "SPHERE CREATION" },
    Something_went_wrong_with:              function() { return "Something went wrong with the creation of your Sphere." },
    Whoops:                                 function() { return "Whoops!" },
    Careful_a_sphere_is_not:                function() { return "Careful! A Sphere is not a room, but a completly separated collection of Crownstones. A holiday home or office would be a second Sphere. Using multiple Spheres in the same location is not recommended." },
    More_items_are_available_:              function() { return "More items are available if you first select a Sphere before going into this menu!" },
    Welcome_:                               function() { return "Welcome!" },
    SPHERE_SETTINGS:                        function() { return "SPHERE SETTINGS" },
  },
  SphereEditMap:{
    __filename: "../../js/views/main/editSubviews/SphereEditMap.tsx",
    Use_this_location_:                     function() { return "Use this location!" },
  },
  SphereEditSettings:{
    __filename: "../js/views/main/editSubviews/SphereEditSettings.tsx",
    Changing_sphere_name___:                function() { return "Changing sphere name..." },
    Removing_you_from_this_Sp:              function() { return "Removing you from this Sphere in the Cloud." },
    Still_Crownstones_detecte:              function() { return "Still Crownstones detected in Sphere" },
    You_can_remove_then_by_go:              function() { return "You can remove then by going to them in their rooms, tap them, click on the settings -> edit and press remove." },
    _Sphere_name_must_be_at_l_header:       function() { return "Sphere name must be at least 2 letters long" },
    _Sphere_name_must_be_at_l_body:         function() { return "Please try again." },
    _Sphere_name_must_be_at_l_left:         function() { return "OK" },
    _Are_you_sure_you_want_to_header:       function() { return "Are you sure you want to leave this Sphere?" },
    _Are_you_sure_you_want_to_body:         function() { return "If you are the Sphere owner, you will have to transfer ownership first." },
    _Are_you_sure_you_want_to_left:         function() { return "No" },
    _Are_you_sure_you_want_to_right:        function() { return "Yes" },
    _Are_you_sure_you_want_to__header:      function() { return "Are you sure you want to delete this Sphere?" },
    _Are_you_sure_you_want_to__body:        function() { return "This is only possible if you have removed all Crownstones from this Sphere." },
    _Are_you_sure_you_want_to__left:        function() { return "No" },
    _Are_you_sure_you_want_to__right:       function() { return "Yes" },
    _Could_not_delete_Sphere__header:       function() { return "Could not delete Sphere!" },
    _Could_not_delete_Sphere__body:         function() { return "Please try again later." },
    _Could_not_delete_Sphere__left:         function() { return "OK" },
    SPHERE_DETAILS:                         function() { return "SPHERE DETAILS" },
    Name:                                   function() { return "Name" },
    PERSONAL_ARTIFICIAL_INTEL:              function() { return "PERSONAL ARTIFICIAL INTELLIGENCE" },
    SPHERE_USERS:                           function() { return "SPHERE USERS" },
    Manage_Sphere_Users:                    function() { return "Manage Sphere Users" },
    _will_do__very_best_help_:              function() { return "I will do my very best to help you!" },
    DANGER:                                 function() { return "DANGER" },
    Leave_Sphere:                           function() { return "Leave Sphere" },
    Delete_Sphere:                          function() { return "Delete Sphere" },
    This_cannot_be_undone_:                 function() { return "THIS CANNOT BE UNDONE!" },
    Please_try_again_later_:                function() { return "Please try again later." },
    You_are_the_owner_of_this:              function() { return "You are the owner of this Sphere. You cannot leave without transferring ownership to another user." },
    Sphere_Menu:                            function() { return "Sphere Menu" },
    SPHERE_LOCATION:                        function() { return "SPHERE LOCATION" },
    Near_:                                  function() { return "Near " + arguments[0] },
    We_use_the_location_of_th:              function() { return "We use the location of the sphere to calculate the sunrise and sunset times used in the behaviour. A very rough estimate is sufficient for this." },
  },
  SphereHubOverview:{
    __filename: "../js/views/main/editSubviews/SphereHubOverview.tsx",
    _Ask_your_Sphere_Admin__A_header:       function() { return "Ask your Sphere Admin" },
    _Ask_your_Sphere_Admin__A_body:         function() { return "Admins can add new Crownstones to Spheres. If you have a new Crownstone you'd like to add, ask the sphere Admin." },
    _Ask_your_Sphere_Admin__A_left:         function() { return "OK" },
  },
  SphereIntegrations:{
    __filename: "../js/views/main/editSubviews/SphereIntegrations.tsx",
    Here_you_can_integrate_wi:              function() { return "Here you can integrate with different services. We\'re hard at work to add more!" },
    Thermostats_:                           function() { return "Thermostats:" },
    Smart_assistants:                       function() { return "Smart assistants:" },
    Toon:                                   function() { return "Toon" },
    Amazon_Alexa:                           function() { return "Amazon Alexa" },
    Philips_Hue:                            function() { return "Philips Hue" },
    Integrations:                           function() { return "Integrations" },
  },
  SphereInvitedUser:{
    __filename: "../js/views/main/editSubviews/SphereInvitedUser.tsx",
    _Lets_remind_someone___Wo_header:       function() { return "Let's remind someone!" },
    _Lets_remind_someone___Wo_body:         function() { return "Would you like me to send another invitation email?." },
    _Lets_remind_someone___Wo_left:         function() { return "No" },
    _Lets_remind_someone___Wo_right:        function() { return "Yes" },
    _Could_not_resend_email___header:       function() { return "Could not resend email.." },
    _Could_not_resend_email___body:         function() { return "Please try again later." },
    _Could_not_resend_email___left:         function() { return "OK" },
    _Are_you_sure___Shall_I_r_header:       function() { return "Are you sure?" },
    _Are_you_sure___Shall_I_r_body:         function() { return "Shall I revoke the invitation?" },
    _Are_you_sure___Shall_I_r_left:         function() { return "No" },
    _Are_you_sure___Shall_I_r_right:        function() { return "Yes" },
    _Could_not_revoke_invitat_header:       function() { return "Could not revoke invitation.." },
    _Could_not_revoke_invitat_body:         function() { return "Please try again later." },
    _Could_not_revoke_invitat_left:         function() { return "OK" },
    INVITE_WAS_SENT_TO:                     function() { return "INVITE WAS SENT TO" },
    MANAGE_INVITE:                          function() { return "MANAGE INVITE" },
    Resend_Invitation:                      function() { return "Resend Invitation" },
    Revoke_Invite:                          function() { return "Revoke Invite" },
    Invited_User:                           function() { return "Invited User" },
  },
  SphereOverview:{
    __filename: "../js/views/main/SphereOverview.tsx",
    No_Spheres_available_:                  function() { return "No Spheres available." },
    Press_Edit_in_the_upper_r:              function() { return "Press Edit in the upper right corner to create your own Sphere or wait to be added to those of others." },
    Sphere_Overview:                        function() { return "Sphere Overview" },
    Hello_there_:                           function() { return "Hello there!" },
    Move_rooms_around:                      function() { return "Move rooms around!" },
    Main:                                   function() { return "Main" },
  },
  SphereRoomArranger:{
    __filename: "../js/views/main/editSubviews/SphereRoomArranger.tsx",
    Solve_Positions:                        function() { return "Auto Arrange!" },
    Drag_it_around_:                        function() { return "Move rooms around!" },
  },
  SphereRoomOverview:{
    __filename: "../js/views/main/editSubviews/SphereRoomOverview.tsx",
    Rearrange_Rooms_:                       function() { return "Rearrange Rooms!" },
    CUSTOMIZE_LAYOUT:                       function() { return "CUSTOMIZE LAYOUT" },
    ROOMS_IN_SPHERE:                        function() { return "ROOMS IN SPHERE" },
    Add_a_room:                             function() { return "Add a room" },
    Rooms_in_:                              function() { return "Rooms in " + arguments[0] },
  },
  SphereUser:{
    __filename: "../js/views/main/editSubviews/SphereUser.tsx",
    _Something_went_wrong__Pl_header:       function() { return "Something went wrong" },
    _Something_went_wrong__Pl_body:         function() { return "Please try again later." },
    _Something_went_wrong__Pl_left:         function() { return "OK" },
    _Are_you_sure_you_want_to_header:       function() { return "Are you sure you want to remove this user from the sphere?" },
    _Are_you_sure_you_want_to_body:         function() { return "User's permissions will be revoked the next time he/she logs into the app." },
    _Are_you_sure_you_want_to_left:         function() { return "No" },
    _Are_you_sure_you_want_to_right:        function() { return "Yes" },
    _Something_went_wrong__Ple_header:      function() { return "Something went wrong" },
    _Something_went_wrong__Ple_body:        function() { return "Please try again later." },
    _Something_went_wrong__Ple_left:        function() { return "OK" },
    Member:                                 function() { return "Member" },
    Guest:                                  function() { return "Guest" },
    Admin:                                  function() { return "Admin" },
    User:                                   function() { return "User" },
    Email:                                  function() { return "Email" },
    Access_Level:                           function() { return "Access Level" },
    REVOKE_PERMISSIONS:                     function() { return "REVOKE PERMISSIONS" },
    Remove_from_Sphere:                     function() { return "Remove from Sphere" },
    Sphere_User:                            function() { return "Sphere User" },
  },
  SphereUserInvite:{
    __filename: "../js/views/main/editSubviews/SphereUserInvite.tsx",
    _Please_provide_an_email__header:       function() { return "Please provide an email address" },
    _Please_provide_an_email__body:         function() { return "" },
    _Please_provide_an_email__left:         function() { return "OK" },
    _Please_provide_a_valid_e_header:       function() { return "Please provide a valid email address" },
    _Please_provide_a_valid_e_body:         function() { return "" },
    _Please_provide_a_valid_e_left:         function() { return "OK" },
    _User_already_in_Sphere___header:       function() { return "User already in Sphere" },
    _User_already_in_Sphere___body:         function() { return "A user with this email address is already in the Sphere." },
    _User_already_in_Sphere___left:         function() { return "OK" },
    _Invite_has_been_sent___A_header:       function() { return "Invite has been sent!" },
    _Invite_has_been_sent___A_body:         function() { return "An email has been sent to " + arguments[0] + "." },
    _Invite_has_been_sent___A_left:         function() { return "OK" },
    _Could_not_send_invite____header:       function() { return "Could not send invite.." },
    _Could_not_send_invite____body:         function() { return "Please try again later." },
    _Could_not_send_invite____left:         function() { return "OK" },
    Email:                                  function() { return "Email" },
    Admin:                                  function() { return "Admin" },
    Member:                                 function() { return "Member" },
    Guest:                                  function() { return "Guest" },
    Access_Level:                           function() { return "Access Level" },
    Access_level:                           function() { return "Access level" },
    Members_can_configure_Cro:              function() { return "Members can configure Crownstones." },
    Guests_can_control_Crowns:              function() { return "Guests can control Crownstones and devices will remain on if they are the last one in the room." },
    Send_invitation_:                       function() { return "Send invitation!" },
    Invite:                                 function() { return "Invite" },
    Send_email_to___:                       function() { return "Send email to..." },
    Inviting_User___:                       function() { return "Inviting User..." },
  },
  SphereUserOverview:{
    __filename: "../js/views/main/editSubviews/SphereUserOverview.tsx",
    ADMINS:                                 function() { return "ADMINS" },
    Admins_can_add__configure:              function() { return "Admins can add, configure and remove Crownstones and Rooms." },
    MEMBERS:                                function() { return "MEMBERS" },
    Members_can_configure_Cro:              function() { return "Members can configure Crownstones." },
    GUESTS:                                 function() { return "GUESTS" },
    Guests_can_control_Crowns:              function() { return "Guests can control Crownstones and devices will remain on if they are the last one in the room." },
    ADD_MORE_PEOPLE:                        function() { return "ADD MORE PEOPLE" },
    Invite_someone_new_:                    function() { return "Invite someone new!" },
    Users_in_:                              function() { return "Users in " + arguments[0] },
  },
  SphereUtil:{
    Tap_the_icon_on_the_botto:              function() { return "Tap the icon on the bottom-right to add a room!" },
    Lets_create_some_rooms_:                function() { return "Let's create some rooms!" },
    If_youre_in_range_of_any_:              function() { return "If you're in range of any of the Crownstones in the sphere, the background will turn blue and you can start teaching your house to find you!" },
    Youll_have_to_be_in_the_S:              function() { return "You'll have to be in the Sphere to continue." },
  },
  Splash:{
    __filename: "../js/views/startupViews/Splash.tsx",
    version__:                              function() { return "version: " + arguments[0] },
  },
  StatusCommunication:{
    __filename: "../js/views/main/StatusCommunication.tsx",
    No_Crownstones_in_range_:               function() { return "Not in sphere." },
    I_see_:                                 function() { return "I see " + arguments[0] },
    NARROW_so_the_indoor_localizati:        function() { return "Indoor localization running." },
    _so_the_indoor_localizati:              function() { return "The indoor localization is running." },
    I_see_only_:                            function() { return "I see only " + arguments[0] },
    _so_I_paused_the_indoor_l:              function() { return "I paused the indoor localization." },
    NARROW_so_I_paused_the_indoor_l:        function() { return "Localization paused." },
    Not_all_rooms_have_been_t:              function() { return "Not all rooms have been trained so I can\'t do indoor localization." },
    Not_enough_Crownstones_pl:              function() { return "Not enough Crownstones placed in rooms to do indoor localization." },
    I_can_see_:                             function() { return "I can see " + arguments[0] },
    Looking_for_Crownstones__:              function() { return "Looking for Crownstones..." },
  },
  StoneDeleted:{
    __filename: "../js/views/static/StoneDeleted.tsx",
    Stone_Deleted_:                         function() { return "Stone Deleted." },
    Deleted:                                function() { return "Deleted" },
    Back_to_room_:                          function() { return "Back to room!" },
  },
  StoneUtil:{
    __filename: "../js/util/StoneUtil.ts",
    Attempting_to_Reset_Error:              function() { return "Attempting to Reset Error..." },
    Success_:                               function() { return "Success!" },
    The_Error_has_been_reset_:              function() { return "The Error has been reset. Normal functionality is re-enabled." },
    Failed_to_reset_error___:               function() { return "Failed to reset error :(" },
    You_can_move_closer_and_t:              function() { return "You can move closer and try again or ignore the error for now." },
  },
  SwitchBar:{
    __filename: "../js/views/components/editComponents/SwitchBar.tsx",
    EXPERIMENTAL:                           function() { return arguments[0] || "EXPERIMENTAL" },
  },
  Tabs:{
    Overview:                               function() { return "Overview" },
    Messages:                               function() { return "Messages" },
    Settings:                               function() { return "Settings" },
    Scenes:                                 function() { return "Scenes" },
  },
  ToonAdd:{
    __filename: "../js/views/thirdParty/toon/ToonAdd.tsx",
    _No_Toon_Found__This_acco_header:       function() { return "No Toon Found" },
    _No_Toon_Found__This_acco_body:         function() { return "This account does not seem to have a Toon we can use...." },
    _No_Toon_Found__This_acco_left:         function() { return "OK" },
    _Whoops__The_provided_cod_header:       function() { return "Whoops" },
    _Whoops__The_provided_cod_body:         function() { return "The provided code seems to be incorrect." },
    _Whoops__The_provided_cod_left:         function() { return "OK" },
    _Whoops__Something_went_w_header:       function() { return "Whoops" },
    _Whoops__Something_went_w_body:         function() { return "Something went wrong... Please try again later." },
    _Whoops__Something_went_w_left:         function() { return "OK" },
    paste_code_ccc:                         function() { return "paste code"},
    Submit:                                 function() { return "Submit" },
    Working____:                            function() { return "Working...." },
    If_something_went_wrong__:              function() { return "If something went wrong, tap here if you want to manually input the code." },
    Connect_with_Toon_:                     function() { return "Connect with Toon!" },
    Sometimes__Toon_is_set_to:              function() { return "Sometimes, Toon is set to \"Away\" while you're still there...\n\n... but Crownstone can ensure that it is set to \"Home\" as long as you're home!" },
    This_application_uses_the:              function() { return "This application uses the Toon API, follows the guiding principles for using the Toon API, but has not been developed by Toon." },
    Toon:                                   function() { return "Toon" },
  },
  ToonOverview:{
    __filename: "../js/views/thirdParty/toon/ToonOverview.tsx",
    _Are_you_sure__You_will_h_header:       function() { return "Are you sure" },
    _Are_you_sure__You_will_h_body:         function() { return "You will have to add Toon again to undo this." },
    _Are_you_sure__You_will_h_left:         function() { return "Cancel" },
    _Are_you_sure__You_will_h_right:        function() { return "Yes" },
    Disconnect_from_Toon:                   function() { return "Disconnect from Toon" },
    This_will_remove_the_Toon:              function() { return "This will remove the Toon integration for all users in your Sphere." },
    There_are_multiple_Toons_:              function() { return "There are multiple Toon's on your account.\n\nPick one to configure it!" },
    Toon:                                   function() { return "Toon" },
  },
  ToonSettings:{
    __filename: "../js/views/thirdParty/toon/ToonSettings.tsx",
    _Whoops__Something_went_w_header:       function() { return "Whoops" },
    _Whoops__Something_went_w_body:         function() { return "Something went wrong..." },
    No_schedule_available:                  function() { return "No schedule available..." },
    _Whoops__Something_went_w_left:         function() { return "OK" },
    _Are_you_sure__You_will_h_header:       function() { return "Are you sure" },
    _Are_you_sure__You_will_h_body:         function() { return "You will have to add Toon again to undo this." },
    _Are_you_sure__You_will_h_left:         function() { return "Cancel" },
    _Are_you_sure__You_will_h_right:        function() { return "Yes" },
    Use_this_phone:                         function() { return "Use this phone" },
    LAST_SCHEDULE_UPDATE__:                 function() { return "LAST SCHEDULE UPDATE: " + arguments[0] },
    MANUAL_UPDATE:                          function() { return "MANUAL UPDATE" },
    Update_Schedule:                        function() { return "Update Schedule" },
    We_automatically_update_t:              function() { return "We automatically update the Toon schedule once a day. You can use this to update manually." },
    Disconnect_from_Toon:                   function() { return "Disconnect from Toon" },
    This_will_remove_the_Toon:              function() { return "This will remove the Toon integration for all users in your Sphere." },
    Crownstone_and_Toon_are_c:              function() { return "Crownstone and Toon are connected!" },
    Sometimes__Toon_is_set_to:              function() { return "Sometimes, Toon is set to \"Away\" while you're still there..." },
    ___but_Crownstone_can_set:              function() { return "...but Crownstone can set it to \"Home\" as long as you're home!" },
    Should_this_phone_tell_To:              function() { return "Should this phone tell Toon when it's home?" },
    This_application_uses_the:              function() { return "This application uses the Toon API, follows the guiding principles for using the Toon API, but has not been developed by Toon." },
    Toon:                                   function() { return "Toon" },
  },
  UpdateCenter:{
    __filename: "../../js/backgroundProcesses/UpdateCenter.tsx",
    Update_available_:                      function() { return "Update available!" },
  },
  ZoomInstructionOverlay:{
    __filename: "../js/views/main/ZoomInstructionOverlay.tsx",
    You_can_go_to_the_sphere_:              function() { return "You can go to the sphere overview just by zooming out!" },
    Youll_have_to_do_this_onc:              function() { return "You'll have to do this once to get rid of this pop up!" },
    Ill_try_it_:                            function() { return "I'll try it!" },
  },
  __UNIVERSAL:{
    Developer_Menu:                         function() { return "Developer Menu" },
    Create:                                 function() { return "Create" },
    Cancel:                                 function() { return "Cancel" },
    Clear:                                  function() { return "Clear" },
    Done:                                   function() { return "Done" },
    Save:                                   function() { return "Save" },
    Update:                                 function() { return "Update" },
    OK:                                     function() { return "OK" },
    Edit:                                   function() { return "Edit" },
    Next:                                   function() { return "Next" },
    Back:                                   function() { return "Back" },
    DAY_Mon:                                function() { return "Mon"},
    DAY_Tue:                                function() { return "Tue"},
    DAY_Wed:                                function() { return "Wed"},
    DAY_Thu:                                function() { return "Thu"},
    DAY_Fri:                                function() { return "Fri"},
    DAY_Sat:                                function() { return "Sat"},
    DAY_Sun:                                function() { return "Sun"},
    DAY_Monday:                             function() { return "Monday"  },
    DAY_Tuesday:                            function() { return "Tuesday" },
    DAY_Wednesday:                          function() { return "Wednesday"},
    DAY_Thursday:                           function() { return "Thursday"},
    DAY_Friday:                             function() { return "Friday"},
    DAY_Saturday:                           function() { return "Saturday"},
    DAY_Sunday:                             function() { return "Sunday"},
    DAY_Mondays:                            function() { return "Mondays"  },
    DAY_Tuesdays:                           function() { return "Tuesdays" },
    DAY_Wednesdays:                         function() { return "Wednesdays"},
    DAY_Thursdays:                          function() { return "Thursdays"},
    DAY_Fridays:                            function() { return "Fridays"},
    DAY_Saturdays:                          function() { return "Saturdays"},
    DAY_Sundays:                            function() { return "Sundays"},
  },
}