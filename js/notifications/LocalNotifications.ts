import {LOG} from "../logging/Log";
import {Util} from "../util/Util";
const PushNotification = require('react-native-push-notification');
import {canUseIndoorLocalizationInSphere} from "../util/DataUtil";

export const LocalNotifications = {
  _handleNewMessage(messageData, state) {
    if (!messageData.sphereId) {
      return;
    }

    LOG.info("LocalNotifications: received new message!", messageData);
    // do we have this sphere?
    if (state && state.spheres[messageData.sphereId]) {
      // check if in the sphere
      if (state.spheres[messageData.sphereId].config.present === true || true) {
        if (messageData.triggerLocationId) {
          // check if you're in this location or if you can't be in a location due to disabled localization
          // return if we do NOT have to deliver the message RIGHT NOW
          let canDoLocalization = canUseIndoorLocalizationInSphere(state, messageData.sphereId);
          if (canDoLocalization && Util.data.getUserLocationIdInSphere(state, messageData.sphereId, state.user.userId) !== messageData.triggerLocationId) {
            // we will deliver this message on moving to the other room.
            return false;
          }
        }

        // deliver message through local notification.
        PushNotification.localNotification({
          /* Android Only Properties */
          // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          // ticker: "My Notification Ticker", // (optional)
          // autoCancel: true, // (optional) default: true
          // largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
          // smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
          // bigText: "Message Found!", // (optional) default: "message" prop
          // subText: messageData.content, // (optional) default: none
          // color: "red", // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          // tag: 'some_tag', // (optional) add tag to message
          // group: "group", // (optional) add group to message
          // ongoing: false, // (optional) set whether this is an "ongoing" notification

          /* iOS only properties */
          // alertAction: // (optional) default: view
          // category: // (optional) default: null
          // userInfo: // (optional) default: null (object containing additional notification data)

          /* iOS and Android properties */
          title: "New Message Found", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
          message: messageData.content, // (required)
          playSound: true, // (optional) default: true
          // soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          // number: '1', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
          repeatType: 'minute', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
          actions: '["OK"]',  // (Android only) See the doc for notification actions to know more
        });

        PushNotification.setApplicationIconBadgeNumber(1);
        return true;
      }
    }

    return false;
  }
};
